{
  "version": 3,
  "sources": ["../src/dom/config.ts", "../src/dom/mod.ts", "../src/utils.ts", "../src/templating/html.ts", "../src/dom/NuBuilder.ts", "../src/dom/tracking.ts", "../src/dom/nu.ts", "../src/stores/Store.ts", "../src/stores/ListStore.ts", "../src/stores/MapStore.ts", "../src/stores/mod.ts", "../src/templating/mustache.ts", "../src/campfire.ts"],
  "sourcesContent": ["// deno-lint-ignore-file no-window\n/**\n * Define minimally required interface for Document implementation\n * This includes only the methods and properties we actually use\n */\nexport interface CfDocumentInterface {\n  createElement(tagName: string): HTMLElement;\n  createDocumentFragment(): DocumentFragment;\n  querySelector(selectors: string): Element | null;\n  querySelectorAll(selectors: string): NodeListOf<Element>;\n  body: HTMLElement;\n}\n\n/**\n * Define minimally required interface for Window implementation\n * This includes only the methods and properties we actually use\n */\nexport interface CfWindowInterface {\n  document: Document;\n}\n\n/**\n * Define minimally required interface for HTMLElement constructor\n */\nexport interface CfHTMLElementConstructor {\n  new(): CfHTMLElementInterface;\n  prototype: CfHTMLElementInterface;\n}\n\n/**\n * Only the properties of HTMLElement that are actually used in Campfire.\n */\nexport type CfHTMLElementInterface = Pick<\n  HTMLElement,\n  'innerHTML' |\n  'classList' |\n  'setAttribute' |\n  'getAttribute' |\n  'hasAttribute' |\n  'removeAttribute' |\n  'addEventListener' |\n  'style' |\n  'id' |\n  'tagName' |\n  'className' |\n  'attributes'\n> & Node;\n\n/**\n * DOMShim provides a configurable interface for core DOM operations.\n * \n * This allows Campfire to work in both browser environments \n * (using native DOM) and server environments (using a DOM implementation\n * like jsdom or happy-dom).\n * \n * Usage examples:\n * \n * 1. Browser environment (automatic initialization):\n *    ```ts\n *    import { CfDom } from './dom/config';\n *    \n *    // Methods are already initialized with browser DOM\n *    const element = CfDom.createElement('div');\n *    element.innerHTML = 'Hello world';\n *    ```\n * \n * 2. Server-side rendering with custom DOM implementation:\n *    ```ts\n *    import { CfDom } from './dom/config';\n *    import { JSDOM } from 'jsdom';\n *    \n *    // Setup a custom DOM environment\n *    const dom = new JSDOM('<!DOCTYPE html><html><body></body></html>');\n *    \n *    // Configure CfDom to use jsdom\n *    CfDom.configure({\n *      document: dom.window.document,\n *      window: dom.window,\n *      HTMLElement: dom.window.HTMLElement\n *    });\n *    \n *    // Now use the shim methods with jsdom backing\n *    const element = CfDom.createElement('div');\n *    ```\n * \n * Note: This implementation uses a \"minimal API\" approach, where only document-level\n * methods (createElement, querySelector, etc.) are provided by CfDom, and element-level\n * operations are performed directly on the elements themselves.\n */\nexport class CfDom {\n  // Use a different name for the private field to avoid naming conflicts with getter\n  private static _document: CfDocumentInterface | null = null;\n  private static _window: CfWindowInterface | null = null;\n  private static _HTMLElement: CfHTMLElementConstructor | null = null;\n  private static _initialized = false;\n  static ssr: boolean = false;\n\n  // Public accessor for document\n  public static get document(): CfDocumentInterface | null {\n    return CfDom._document;\n  }\n\n  /**\n   * Initialize the shim by attempting to detect browser environment.\n   * If in a browser, use the native DOM objects; otherwise, leave them unset.\n   */\n  public static initialize(): void {\n    if (CfDom._initialized) return;\n\n    try {\n      // Check if we're in a browser environment\n      if (typeof window !== 'undefined' && window.document) {\n        CfDom._document = window.document;\n        CfDom._window = window;\n        CfDom._HTMLElement = window.HTMLElement;\n      }\n    } catch {\n      // We're likely in a non-browser environment\n    }\n\n    CfDom._initialized = true;\n  }\n\n  /**\n   * Configure the shim with custom DOM implementation.\n   */\n  public static configure(options: {\n    document?: CfDocumentInterface;\n    window?: CfWindowInterface;\n    HTMLElement?: CfHTMLElementConstructor;\n    ssr?: boolean;\n  }): void {\n    if (options.document) CfDom._document = options.document;\n    if (options.window) CfDom._window = options.window;\n    if (options.HTMLElement) CfDom._HTMLElement = options.HTMLElement;\n    if (typeof options.ssr !== 'undefined') this.ssr = options.ssr;\n    CfDom._initialized = true;\n  }\n\n  /**\n   * Check if shim is properly configured.\n   */\n  private static ensureInitialized(): void {\n    if (!CfDom._initialized) {\n      CfDom.initialize();\n    }\n\n    CfDom.ensureAvailable(CfDom._document, 'document');\n    CfDom.ensureAvailable(CfDom._window, 'window');\n    CfDom.ensureAvailable(CfDom._HTMLElement, 'HTMLElement');\n  }\n\n  /**\n   * Throws an error if the specified object is not available.\n   */\n  private static ensureAvailable(obj: any, name: string): void {\n    if (!obj) {\n      throw new Error(`CfDom: ${name} is not available.` +\n        'Please configure CfDom with a valid DOM implementation.');\n    }\n  }\n\n  // Document methods\n  public static createElement(tagName: string): HTMLElement {\n    CfDom.ensureInitialized();\n    return CfDom._document!.createElement(tagName);\n  }\n\n  public static createDocumentFragment(): DocumentFragment {\n    CfDom.ensureInitialized();\n    return CfDom._document!.createDocumentFragment();\n  }\n\n  public static querySelector(selector: string, node?: ParentNode): Element | null {\n    CfDom.ensureInitialized();\n    const n = node ?? CfDom._document!;\n    return n.querySelector(selector);\n  }\n\n  public static querySelectorAll(selector: string, node?: ParentNode): NodeListOf<Element> {\n    CfDom.ensureInitialized();\n    const n = node ?? CfDom._document!;\n    return n.querySelectorAll(selector);\n  }\n\n  public static get body(): HTMLElement {\n    CfDom.ensureInitialized();\n    return CfDom._document!.body;\n  }\n\n  /**\n   * Add event listener with SSR protection\n   * This is one of the few element methods we keep as it has special SSR handling\n   */\n  public static addElEventListener(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions\n  ): void {\n    CfDom.ensureInitialized();\n    if (this.isSsr()) throw new Error(\"Event listeners are not available in SSR contexts!\");\n    el.addEventListener(type, listener, options);\n  }\n\n  // Additional helpers\n  public static isHTMLElement(obj: any): obj is HTMLElement {\n    CfDom.ensureInitialized();\n    return obj instanceof CfDom._HTMLElement!;\n  }\n\n  /**\n   * Check if code is running in a browser environment.\n   * This can be useful for conditional logic based on environment.\n   */\n  public static isBrowser(): boolean {\n    return typeof window !== 'undefined' && !!window.document;\n  }\n\n  /**\n   * Check if DOM shim is using a custom (non-browser) implementation.\n   */\n  public static isUsingCustomDOMImplementation(): boolean {\n    CfDom.ensureInitialized();\n    return CfDom._document !== null &&\n      (typeof window === 'undefined' || CfDom._document !== window.document);\n  }\n\n  public static isSsr(value?: boolean): boolean {\n    if (typeof value !== 'undefined') return this.ssr = value;\n    return this.ssr;\n  }\n}\n\n// Initialize on import\nCfDom.initialize();", "import type { ElementPosition } from \"../types.ts\";\nimport { CfDom } from \"./config.ts\";\nimport type { CfHTMLElementInterface } from './config.ts';\nexport { CfDom };\n\n/**\n * Inserts an element into the DOM given a reference element and the relative position\n * of the new element.\n * \n * * if `where` looks like `{ after: reference }`, the element is inserted into `reference`'s\n * parent, after `reference`.\n * * if `where` looks like `{ before: reference }`, the element is inserted into `reference`'s\n * parent, before `reference`.\n * * if `where` looks like `{ into: reference, at: 'start' }`, the element is inserted into \n * `reference`, before its first child.\n * * if `where` looks like `{ into: reference }`, the element is inserted into `reference`,\n * after its last child.\n * @param els The element(s) to insert.\n * @param where An object specifying where to insert `elem` relative to another element.\n * @throws an Error when there are no valid keys ('into', 'after', or 'before') present in `where`.\n * @returns the element that was inserted, so you can do `const a = insert(nu(), _)`.\n */\nexport const insert = (els: Element | Element[], where: ElementPosition) => {\n    // Check we have at least one valid key\n    if (!('into' in where) && !('after' in where) && !('before' in where)) {\n        throw new Error(\"No valid position specified. Use 'into', 'after', or 'before'.\");\n    }\n\n    let position: InsertPosition = 'beforeend';\n    let ref: CfHTMLElementInterface;\n\n    if ('after' in where) {\n        position = 'afterend';\n        ref = where.after;\n    } else if ('before' in where) {\n        position = 'beforebegin';\n        ref = where.before;\n    } else if ('into' in where && where.at === 'start') {\n        position = 'afterbegin';\n        ref = where.into;\n    } else {\n        ref = where.into;\n    }\n\n    const frag = CfDom.createDocumentFragment();\n    if (Array.isArray(els)) {\n        for (const item of els) frag.appendChild(item);\n    }\n    else {\n        frag.appendChild(els);\n    }\n\n    if (position === 'beforebegin') {\n        const parentNode = ref.parentNode;\n        if (parentNode) parentNode.insertBefore(frag, ref);\n    } else if (position === 'afterend') {\n        const parentNode = ref.parentNode;\n        if (parentNode) parentNode.insertBefore(frag, ref.nextSibling);\n    } else if (position === 'afterbegin') {\n        ref.insertBefore(frag, ref.firstChild);\n    } else {\n        ref.appendChild(frag);\n    }\n\n    return els;\n};\n\n/**\n * Fires a callback when the DOMContentLoaded event fires.\n * @param cb The callback to run.\n * @returns void\n */\nexport const onload = (cb: (ev: Event) => void) => globalThis.addEventListener('DOMContentLoaded', cb);\n\nexport type SelectParams = {\n    /** The selector to query for. */\n    s: string;\n    /** The parent node to query. Defaults to `document`. */\n    from?: ParentNode;\n    /** Whether to return all elements matching the given selector or just the first. */\n    all?: true;\n}\n\n/**\n * Queries the DOM for a particular selector, and returns the first element matching it.\n * @param opts See SelectParams.\n * @returns Element(s) matching the given selector, or an empty list.\n */\nexport function select(params: SelectParams & { single: true }): HTMLElement | null;\nexport function select(params: SelectParams & { single?: false }): HTMLElement[];\nexport function select({ s, all, from, single }: SelectParams & { single?: boolean }) {\n    const parent = (from ?? CfDom.document) as ParentNode;\n    if (all) {\n        return Array.from(CfDom.querySelectorAll(s, parent)) as HTMLElement[];\n    }\n\n    const elt = CfDom.querySelector(s, parent);\n    return single ? elt : [elt];\n}\n\n/**\n * Removes `elt` from the DOM.\n * @param elt The element to remove.\n * @returns void\n */\nexport const rm = (elt: Element) => elt.remove();\n\n/**\n * Empties a DOM element of its content.\n * @param elt The element to empty.\n */\nexport const empty = (elt: Element) => {\n    elt.innerHTML = '';\n};", "/**\n * a simple HTML sanitizer. Escapes `&`, `<`, `>`, `'`, and `\"` by \n * replacing them with their corresponding HTML escapes \n * (`&amp;`,`&gt;`, `&lt;`, `&#39;`, and `&quot`).\n * @param str A string to escape.\n * @returns The escaped string.\n * No characters other than the ones mentioned above are escaped.\n * `escape` is only provided for basic protection against XSS and if you need more\n * robust functionality consider using another HTML escaper (such as\n * [he](https://github.com/mathiasbynens/he) or \n * [sanitize-html](https://github.com/apostrophecms/sanitize-html)).\n */\nexport const escape = (str: string) => {\n    if (!str) return '';\n\n    return str.replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;');\n}\n\n/**\n * Unescapes the output of escape() by replacing `&amp;`, `&gt;`, `&lt;`,\n * `&#39;`, and `&quot` with `&`, `<`, `>`, `'`, and `\"` respectively.\n * @param str A string to unescape.\n * @returns The string, with its character references replaced by the characters it references.\n * No characters other than the ones mentioned above are unescaped.\n */\nexport const unescape = (str: string) => {\n    if (!str) return '';\n    const expr = /&(?:amp|lt|gt|quot|#(0+)?39);/g;\n\n    const entities: Record<string, string> = {\n        '&amp;': '&',\n        '&lt;': '<',\n        '&gt;': '>',\n        '&quot;': '\"',\n        '&#39;': \"'\"\n    };\n\n    return str.replace(expr, (entity) => entities[entity] || '\\'');\n}\n\nexport const seq = (...args: number[]) => {\n    let start = 0, stop = args[0], step = 1;\n    if (typeof args[1] !== 'undefined') {\n        start = args[0];\n        stop = args[1];\n    }\n\n    if (args[2]) step = args[2];\n    const result = [];\n    for (let i = start; i < stop; i += step) {\n        result.push(i);\n    }\n\n    return result;\n}\n\n/**\n * Represents a Node-style callback function that receives either an error or a result.\n * @template U The type of the successful result\n * @template E The type of the error\n */\nexport type Callback<U, E> = (err: E | null, res: U | null) => void;\n\n/**\n * Represents a function that accepts a callback as its first argument, followed by any other arguments.\n * @template T The types of the function arguments (excluding the callback)\n * @template U The type of the successful result passed to the callback\n * @template E The type of the error that might be passed to the callback\n */\nexport type Callbackified<T extends any[], U, E> = (cb: Callback<U, E>, ...args: T) => void;\n\n/**\n * Converts a function that returns a Promise into a function that accepts a Node-style callback.\n * \n * This utility helps integrate Promise-based code with callback-based APIs, including\n * using async operations in synchronous contexts like Store event handlers.\n * \n * @template T The types of the function arguments\n * @template U The type of the value that the Promise resolves to (default: unknown)\n * @template E The type of the error that might be caught (default: any)\n * \n * @param fn A function that returns a Promise\n * @returns A function that accepts a Node-style callback as its first argument\n * \n * @example\n * ```\n * // Using with Store event handlers (which expect synchronous functions)\n * // Instead of this (which uses async in a non-async context):\n * myStore.on('update', async (event) => {\n *   const data = await fetchDataFromApi(event.value);\n *   // Do something with data...\n * });\n * \n * // Do this instead:\n * const handleUpdateAsync = async (event) => {\n *   const data = await fetchDataFromApi(event.value);\n *   // Do something with data...\n * };\n * \n * myStore.on('update', (event) => {\n *   callbackify(handleUpdateAsync)(\n *     (err, _) => { if (err) console.error('Error:', err); },\n *     event\n *   );\n * });\n * ```\n */\nexport const callbackify = <T extends any[], U = unknown, E = any>(\n    fn: (...args: T) => Promise<U>\n): Callbackified<T, U, E> => {\n    return (cb, ...args) => {\n        fn(...args)\n            .then((v) => cb(null, v))\n            .catch(err => cb(err, null));\n    };\n}\n\n/**\n * Repeatedly executes a function at specified intervals.\n * \n * This utility provides a continuous polling mechanism with proper cleanup.\n * The function always schedules the next execution even if the current one throws an error.\n * \n * @param fn The function to execute repeatedly\n * @param interval Time in milliseconds between each execution\n * @param callNow Whether to execute the function immediately (default: false)\n * @returns A cancel function that stops the polling when called\n * \n * @example\n * ```\n * // Check for updates every 5 seconds\n * const stopPolling = poll(() => {\n *   checkForNewMessages();\n * }, 5000, true); // Start immediately\n * \n * // Later, when you want to stop polling:\n * stopPolling();\n * ```\n */\nexport const poll = (fn: () => void, interval: number, callNow = false) => {\n    let timeout: ReturnType<typeof setTimeout> | null = null;\n    const handler = () => {\n        try {\n            fn();\n        }\n        finally {\n            timeout = setTimeout(handler, interval);\n        }\n    }\n    if (callNow) handler();\n    else timeout = setTimeout(handler, interval);\n    return () => {\n        if (timeout !== null) clearTimeout(timeout);\n    }\n}\n\nconst generateId = (prefix: string) => `${prefix}-${Math.random().toString(36).slice(2, 8)}`;\n\n/**\n * Returns a function that generates a random 6-character alphanumeric ID,\n * optionally prefixed. The generated IDs are guaranteed to be unique within\n * the scope of the returned function.\n * \n * Note: This function is not suitable for generating IDs that require\n * high entropy or cryptographic security.\n * @example\n * ```ts\n * const genId = ids();\n * const todoId = ids('todo');\n * console.log(genId()) // cf-k9yh28\n * console.log(todoId()) // todo-hv9p4y\n * ```\n * @param prefix The prefix to use. Defaults to 'cf-'.\n * @returns A function that generates a unique ID.\n */\nexport const ids = (prefix = 'cf-') => {\n    const existing = new Set<string>();\n    return () => {\n        let id = generateId(prefix);\n        while (existing.has(id)) id = generateId(prefix);\n        existing.add(id);\n        return id;\n    }\n}", "import { escape } from '../utils.ts';\n\nexport interface RawHtml {\n    raw: true,\n    contents: string\n}\n\n/**\n * Options for r()\n */\nexport interface RawHtmlOptions {\n    joiner?: string;\n}\n\n/**\n * Prevent values from being escaped by html``.\n * @param val Any value.\n * @returns An object that tells html`` to not escape `val` while building the HTML string.\n */\nexport const r = (val: any, options?: RawHtmlOptions): RawHtml => {\n    return {\n        raw: true,\n        contents: Array.isArray(val) ?\n            val.join(options?.joiner ?? ' ') :\n            val.toString()\n    }\n}\n\n/**\n * Creates an HTML string with automatic escaping of interpolated values.\n * Use r() to prevent escaping specific values.\n * @param strings The constant portions of the template string.\n * @param values The dynamic values to be interpolated (automatically escaped unless wrapped with r()).\n * @returns The built HTML string with all values properly escaped.\n * @example\n * ```\n * const unsafe = `oops <script>alert(1)</script>`;\n * testing.innerHTML = html`foo bar baz ${unsafe}`; // Values are automatically escaped\n * const safeHtml = html`<div>${r(\"<b>Bold</b>\")}</div>`; // Using r() to prevent escaping\n * ```\n */\nexport const html = (strings: TemplateStringsArray, ...values: (string | boolean | number | RawHtml)[]) => {\n    const built = [];\n    for (let i = 0; i < strings.length; i++) {\n        built.push(strings[i] || '');\n        const val = values[i];\n        if (typeof val !== 'undefined' && typeof val !== 'object') {\n            built.push(escape((val ?? '').toString()));\n        }\n        else {\n            built.push(val?.contents || '');\n        }\n    }\n    return built.join('');\n}\n", "import { Store } from \"../stores/mod.ts\";\nimport type {\n    ElementProperties,\n    RenderFunction,\n    StringStyleProps,\n    TagStringParseResult,\n    DOMEventHandlers\n} from \"../types.ts\";\nimport { extend } from \"./nu.ts\";\nimport { CfDom } from \"./config.ts\";\nimport { html } from \"../templating/html.ts\";\nimport type { RawHtml } from \"../templating/html.ts\";\n\n/**\n * Creates a typed HTML element based on the tag name.\n * \n * @param name - The HTML tag name.\n * @returns A newly created HTML element of the specified type.\n * @internal\n */\nconst createTypedElement = <K extends keyof HTMLElementTagNameMap>(name: K) => {\n    return CfDom.createElement(name);\n}\n\n/** Creates a typed HTML element from an info string. */\nconst createElemFromInfo = (info: string) => {\n    let { tag, id, classes = [] } = parseEltString(info);\n\n    if (classes?.some((itm) => itm.includes('#'))) {\n        throw new Error(\n            \"Error: Found # in a class name. \" +\n            \"Did you mean to do elt#id.classes instead of elt.classes#id?\"\n        );\n    }\n\n    if (!tag) tag = 'div';\n    const elem = createTypedElement(tag as keyof HTMLElementTagNameMap);\n\n    if (id) elem.id = id;\n    if (classes?.length) classes.forEach(cls => elem.classList.add(cls));\n\n    return elem;\n}\n\n/**\n * Parses a tag string into its component parts.\n * \n * @param str A string to parse, of the form tag#id.classes[.classes].\n * @returns A `TagStringParseResult` object containing the parsed information.\n * @internal\n */\nconst parseEltString = (str: string | undefined): TagStringParseResult => {\n    const matches = str ? str.match(/([0-9a-zA-Z\\-]*)?(#[0-9a-zA-Z\\-]*)?((.[0-9a-zA-Z\\-]+)*)/) : undefined;\n    const results = matches ? matches.slice(1, 4)?.map((elem) => elem ? elem.trim() : undefined) : Array(3).fill(undefined);\n\n    if (results && results[1]) results[1] = results[1].replace(/#*/g, \"\");\n\n    return matches ? {\n        tag: results[0] || undefined,\n        id: results[1] || undefined,\n        classes: results[2] ? results[2].split('.').filter((elem: string) => elem.trim()) : undefined\n    } : {};\n};\n\n/**\n * Builder class for creating and configuring HTML elements using a fluent API.\n * \n * This class provides a chainable interface for configuring element properties\n * before creating the actual DOM element with the `done()` method.\n * \n * @example\n * ```typescript\n * // Create a button with multiple options\n * const [button] = nu('button#submit.primary')\n *   .content('Submit')\n *   .attr('type', 'submit')\n *   .on('click', () => console.log('Clicked!'))\n *   .style('backgroundColor', 'blue')\n *   .done();\n * ```\n */\nexport class NuBuilder<Elem extends HTMLElement, Deps extends Record<string, Store<any>>, Info = string> {\n    /** Element properties configuration object */\n    props: ElementProperties<Elem, Deps> = {};\n\n    /** Element info string (tag, id, classes) */\n    private elem: Elem;\n\n    /**\n     * Creates a new NuBuilder instance.\n     * \n     * @param info - A string describing the element in the format 'tag#id.class1.class2'\n     * @param props - Optional initial properties for the element\n     */\n    constructor(elt: Elem, props?: ElementProperties<Elem, Deps>);\n    constructor(elt: Info, props?: ElementProperties<Elem, Deps>);\n    constructor(elt: Info | Elem, props?: ElementProperties<Elem, Deps>);\n    constructor(elt: Info | Elem, props?: ElementProperties<Elem, Deps>) {\n        this.elem = (typeof elt === 'string' ? createElemFromInfo(elt) : elt) as Elem;\n        this.props = props || {};\n    }\n\n    /**\n     * Set a class name. Pass on with a falsy value to not apply the class.\n     * \n     * @param name - The class name to add/remove\n     * @param on - Whether the class should be applied (true) or removed (false/falsy)\n     * @returns The builder instance for chaining\n     */\n    cls(name: string, on: '' | boolean | 0 | null = true) {\n        this.props.classes ??= {};\n        this.props.classes[name] = !!on;\n        return this;\n    }\n\n    /**\n     * Finalizes the builder and creates the actual DOM element with all configured properties.\n     * \n     * @returns A tuple containing the created element as the first item, followed by any child elements\n     * @throws Error if a class name contains a '#' character\n     */\n    done(): [Elem, ...HTMLElement[]] {\n        return extend(this.elem as any as Elem, this.props);\n    }\n\n    ref() {\n        return this.done()[0];\n    }\n\n    /**\n     * Sets the content of the element as a string, escaped by default.\n     * Useful for quick and safe interpolation of strings into DOM content.\n     * \n     * @param value - String content to set\n     * @returns The builder instance for chaining\n     */\n    content(value: string) {\n        this.props.contents = value;\n        return this;\n    }\n\n    /**\n     * Sets a render function that will be called to generate content\n     * whenever dependencies change.\n     * \n     * @param fn - The render function that returns content\n     * @returns The builder instance for chaining\n     */\n    render(fn: RenderFunction<Elem, Deps>) {\n        this.props.render = fn;\n        return this;\n    }\n\n    /**\n     * Sets a single attribute on the element.\n     * \n     * @param name - The attribute name\n     * @param value - The attribute value. Set to empty string ('') to clear/reset an attribute.\n     * @returns The builder instance for chaining\n     */\n    attr(name: string, value: string | boolean | number) {\n        this.props.attrs ||= {};\n        this.props.attrs[name] = value.toString();\n        return this;\n    }\n\n    /**\n     * Sets multiple attributes on the element at once.\n     * \n     * @param value - An object containing attribute name-value pairs\n     * @returns The builder instance for chaining\n     */\n    attrs(value: ElementProperties<Elem, Deps>['attrs']) {\n        this.props.attrs = value;\n        return this;\n    }\n\n    /**\n     * Sets whether the content value should be treated as raw HTML.\n     * \n     * @param value - If true, content will not be escaped before setting innerHTML\n     * @returns The builder instance for chaining\n     */\n    raw(value: boolean) {\n        this.props.raw = value;\n        return this;\n    }\n\n    /**\n     * Sets miscellaneous properties on the element (e.g. `input.checked`).\n     * \n     * @param obj - Either a property name or an object containing multiple properties\n     * @param value - The value for the property if obj is a property name\n     * @returns The builder instance for chaining\n     */\n    misc(obj: string, value: unknown): NuBuilder<Elem, Deps, Info>;\n    misc(obj: Record<string, unknown>): NuBuilder<Elem, Deps, Info>;\n    misc(obj: string | Record<string, unknown>, value?: unknown): NuBuilder<Elem, Deps, Info> {\n        this.props.misc ||= {};\n        if (typeof obj === 'object') this.props.misc = obj;\n        else this.props.misc[obj] = value;\n        return this;\n    }\n\n    /**\n     * Sets a single CSS style property on the element.\n     * \n     * @param prop - The CSS property name\n     * @param value - The CSS property value. Set to empty string ('') to clear a style.\n     * @returns The builder instance for chaining\n     */\n    style(prop: StringStyleProps, value: string) {\n        this.props.style ||= {};\n        this.props.style[prop] = value;\n        return this;\n    }\n\n    /**\n     * Sets multiple CSS style properties on the element at once.\n     * \n     * @param value - An object containing style name-value pairs\n     * @returns The builder instance for chaining\n     */\n    styles(value: ElementProperties<Elem, Deps>['style']) {\n        this.props.style = value ?? {};\n        return this;\n    }\n\n    /**\n     * Attaches an event handler to the element.\n     * \n     * @param type - The event type to listen for (e.g., 'click', 'submit')\n     * @param handler - The event handler function\n     * @returns The builder instance for chaining\n     */\n    on<K extends keyof HTMLElementEventMap>(type: K, handler: (event: HTMLElementEventMap[K]) => void) {\n        this.props.on ||= {};\n        this.props.on[type] = handler as DOMEventHandlers[K];\n        return this;\n    }\n\n    /**\n     * Specifies selectors for elements that should be retrieved after building the element.\n     * \n     * @param selectors - A single selector string or an array of selector strings\n     * @returns The builder instance for chaining\n     */\n    gimme(...selectors: string[]) {\n        this.props.gimme ||= [];\n        this.props.gimme = selectors;\n        return this;\n    }\n\n    deps<ND extends Record<string, Store<any>>>(obj: ND): NuBuilder<Elem, Deps & ND, Info> {\n        this.props.deps = { ...(this.props.deps as Deps), ...obj };\n        return this as unknown as NuBuilder<Elem, Deps & ND, Info>;\n    }\n\n    /**\n     * Unsafely set the html of the object. This is equivalent to calling\n     * .content(...).raw(true) and is meant to be used with a templating function\n     * like `cf.html`.\n     * \n     * Can also be used as a templating function: nu().html`<b>${name}</b>` will\n     * cause name to be escaped and interpolated.\n     * @param value The string to set.\n     * @returns The builder for chaining.\n     */\n    html(value: string): NuBuilder<Elem, Deps, Info>;\n    html(arr: TemplateStringsArray, ...values: (string | number | boolean | RawHtml)[]): NuBuilder<Elem, Deps, Info>;\n    html(value: string | TemplateStringsArray, ...args: (string | boolean | number | RawHtml)[]): NuBuilder<Elem, Deps, Info> {\n        this.props.raw = true;\n        if (typeof value === 'string') {\n            this.props.contents = value;\n        }\n        else if (Array.isArray(value)) {\n            this.props.contents = html(value, ...args);\n        }\n        return this;\n    }\n\n    /**\n     * Mount reactive children into a parent element. The children are preserved\n     * across re-renders and can be independently reactive.\n     * @param children An object whose keys correspond to the `name` attributes \n     * of cf-slot elements in the parent's innerHTML.\n     * @returns The builder object for chaining.\n     */\n    children(children: Record<string, HTMLElement | HTMLElement[]>) {\n        this.props.children = children;\n        return this;\n    }\n\n    /**\n     * Mark the element for tracking, so it can be retrieved later by calling\n     * `cf.tracked(id)`.\n     * @param id The id to track the element by.\n     */\n    track(id: string) {\n        console.log(id);\n        this.props.track = id;\n        return this;\n    }\n}", "const elements = new Map<string, HTMLElement>();\n\n/**\n * Track an element by an arbitrary string id. This is essentially a global \n * key-value store of elements you'd like to keep around.\n * @param id an id to track the element by. This has to be unique across your\n * entire application.\n * @param elt The element to track.\n */\nexport const track = (id: string, elt: HTMLElement) => {\n    elements.set(id, elt);\n}\n\n/**\n * Stop tracking an element that was previously tracked by `track()`. If you're\n * calling track for thousands of elements it's probably a good idea to untrack\n * them when you're done.\n * @param id id of the element to track, as passed to `track()`.\n */\nexport const untrack = (id: string) => {\n    elements.delete(id);\n}\n\n/**\n * Retrieve a tracked element by its id. Will return null if an element for\n * corresponding to a given id is not found.\n */\nexport const tracked = (id: string) => {\n    return elements.get(id) || null;\n}", "import type { Store } from \"../stores/mod.ts\";\nimport type { ElementProperties, InferElementType, RenderBuilder, RenderFunction, UnwrapStore } from \"../types.ts\";\nimport type { CfHTMLElementInterface } from \"./config.ts\";\nimport { escape } from \"../utils.ts\";\nimport { select } from \"./mod.ts\";\nimport { NuBuilder } from \"./NuBuilder.ts\";\nimport { CfDom } from \"./config.ts\";\nimport type { StoreEventFromObject } from \"../types.ts\";\nimport * as tracking from './tracking.ts';\n\nconst unwrap = <D extends Record<string, Store<any>>>(\n    deps: D\n): UnwrapStore<D> => {\n    const result: any = {};\n    for (const key in deps) {\n        result[key] = deps[key].current();\n    }\n    return result;\n};\n\nconst isValidRenderFn = <T extends HTMLElement, D extends Record<string, Store<any>>>(\n    fn: ElementProperties<T, D>[\"render\"],\n): fn is RenderFunction<T, any> => {\n    if (!fn) return false;\n    if (typeof fn !== \"function\") return false;\n    return true;\n};\n\nconst reconcileClasses = (elt: HTMLElement, changed: Record<string, boolean>) => {\n    return Object.keys(changed).forEach(\n        key => changed[key] ? elt.classList.add(key) : elt.classList.remove(key)\n    );\n}\n\n/**\n * Reconciles the properties from a NuBuilder to an existing element.\n * This applies the builder's properties to the element without replacing it.\n * \n * @param elt The target element to update\n * @param builder The NuBuilder whose properties will be applied\n */\nconst reconcile = <\n    T extends HTMLElement,\n    D extends Record<string, Store<any>>\n>(elt: T, builder: RenderBuilder<T, D>) => {\n    const { style = {}, attrs = {}, misc = {}, classes = {} } = builder.props;\n    reconcileClasses(elt, classes);\n    Object.assign(elt.style, style);\n    if (attrs) {\n        Object.entries(attrs || {}).forEach(([key, value]) => {\n            if (typeof value === 'string' && value.length === 0) {\n                elt.removeAttribute(key);\n            }\n            else if (elt.getAttribute(key) !== String(value)) {\n                elt.setAttribute(key, String(value));\n            }\n        });\n    }\n    if (misc) Object.assign(elt, misc);\n    return elt;\n};\n\nconst extractReactiveChildren = (elt: HTMLElement) =>\n    select({ s: '[data-cf-slot]', all: true, from: elt })\n        .map(elt => [elt.getAttribute('data-cf-slot'), elt] as [string, HTMLElement])\n        .reduce((prev, [slot, elt]) => {\n            prev[slot] ??= [];\n            prev[slot].push(elt);\n            return prev;\n        }, {} as Record<string, HTMLElement[]>)\n\nconst setupDeps = <\n    T extends HTMLElement, D extends Record<string, Store<any>>\n>({ elt, render, deps }: {\n    elt: T,\n    render: RenderFunction<T, D>,\n    deps: D\n}) => {\n    Object.entries(deps).forEach(([name, dep]) => dep.any((evt) => {\n        const builder = new NuBuilder<T, D, string>(elt);\n        const res = render(unwrap(deps), {\n            elt,\n            event: { ...(evt as StoreEventFromObject<D>), triggeredBy: name },\n            b: builder as NuBuilder<T, any, string>,\n            first: false\n        });\n\n        const children = extractReactiveChildren(elt);\n        if (typeof res === 'string') {\n            elt.innerHTML = res;\n        }\n        else if (res instanceof NuBuilder) {\n            const c = res.props.contents || '';\n            elt.innerHTML = res.props.raw ? c : escape(c);\n            reconcile(elt, res);\n        }\n        else return;\n\n        for (const key in children) {\n            const [slot] = select({ s: `cf-slot[name='${key}']`, from: elt });\n            if (!slot) continue;\n            const list = children[key] || [];\n            const fragment = CfDom.createDocumentFragment();\n            list.forEach(elt => fragment.appendChild(elt))\n            slot.replaceWith(fragment);\n        }\n    })\n    );\n}\n\nconst setupReactiveChildren = <T extends HTMLElement>(\n    elt: T,\n    children: Record<string, CfHTMLElementInterface | CfHTMLElementInterface[]>\n) => {\n    elt.querySelectorAll('cf-slot[name]').forEach(itm => {\n        const name = itm.getAttribute('name');\n        if (!name) return;\n        if (Object.hasOwn(children, name)) {\n            const val = children[name];\n            const replacement: Node = Array.isArray(val) ?\n                CfDom.createDocumentFragment() : val;\n            if (Array.isArray(val)) val.forEach(item => {\n                replacement.appendChild(item);\n                item.setAttribute('data-cf-slot', name);\n            });\n            else val.setAttribute('data-cf-slot', name);\n            itm.replaceWith(replacement);\n        }\n    });\n}\n\n/**\n * Takes an existing element and modifies its properties.\n * Refer ElementProperties documentation for details on\n * what can be changed.\n * @param elt The element to modify.\n * @param args Properties to set on the element.\n */\nexport const extend = <\n    T extends HTMLElement,\n    D extends Record<string, Store<any>>,\n>(\n    elt: T,\n    args: ElementProperties<T, D> = {},\n): [T, ...HTMLElement[]] => {\n    const {\n        contents,\n        render,\n        misc,\n        style,\n        on = {},\n        attrs = {},\n        raw: r,\n        classes = {},\n        gimme = [],\n        deps = ({} as D),\n        children = {},\n        track\n    } = args;\n    let raw = !!r;\n\n    if (track) tracking.track(track, elt);\n    reconcileClasses(elt, classes);\n\n    const setHtml = (str: string) => elt.innerHTML = raw ? str : escape(str);\n\n    if (isValidRenderFn<T, D>(render)) {\n        setupDeps({ elt, render, deps });\n        const result = render(unwrap(deps), {\n            elt,\n            b: new NuBuilder<T, D, string>(elt),\n            first: true\n        });\n\n        if (typeof result === \"undefined\") elt.setAttribute(\"data-cf-fg-updates\", \"true\");\n        else {\n            elt.removeAttribute(\"data-cf-fg-updates\");\n            if (typeof result === 'string') {\n                setHtml(result);\n            }\n            if (result instanceof NuBuilder) {\n                raw = !!result.props.raw;\n                setHtml(result.props.contents || '');\n                reconcile(elt, result);\n            }\n        }\n    } else if (typeof contents === \"string\") {\n        setHtml(contents);\n    }\n\n    setupReactiveChildren(elt, children);\n\n    if (misc) Object.assign(elt, misc);\n    if (style) Object.assign(elt.style, style);\n\n    Object.entries(on)\n        .forEach(([evt, listener]) => CfDom.addElEventListener(elt, evt, listener as (evt: Event) => void));\n\n    Object.entries(attrs).forEach(([attr, value]) => {\n        const current = elt.getAttribute(attr);\n        const str = String(value);\n        if (current === str) return;\n        if (typeof value === 'string' && value.length === 0) elt.removeAttribute(attr);\n        else elt.setAttribute(attr, String(value));\n    });\n\n    const extras: HTMLElement[] = [];\n    for (const selector of gimme) {\n        const found = elt.querySelector(selector);\n        // This is on purpose.\n        // The user will expect the items to be at the same indices\n        // as the selectors they supplied.\n        extras.push(found as HTMLElement);\n    }\n\n    return [elt, ...extras];\n};\n\n/**\n * An element creation helper.\n * @param info Basic information about the element.\n * `eltInfo` should be a string of the format `tagName#id.class1.class2`.\n * Each part (tag name, id, classes) is optional, and an infinite number of\n * classes is allowed. When `eltInfo` is an empty string, the tag name is assumed to be\n * `div`.\n * @param args Optional extra properties for the created element.\n * @returns The newly created DOM element and any other elements requested in the\n * `gimme` parameter specified in args.\n * @example\n * ```\n * cf.nu(`elt#id.class1`, {\n *  raw: true,\n *  c: html`<span class=some-span>foo bar</span>`,\n *  gimme: ['.some-span']\n * }) // Output: [<elt#id.class1>, <the span some-span>]\n * ```\n * @example\n * ```\n * cf.nu(`span.some-span`, {\n *  // properties...\n *  // no gimme specified\n * }) // Output is still a list [<span.some-span>]\n * ```\n */\nexport const nu = <\n    const Info extends string,\n    Elem extends InferElementType<Info>,\n    Deps extends Record<string, Store<any>>,\n>(\n    elt = 'div' as Info | Elem,\n    args: ElementProperties<Elem, Deps> = {},\n): NuBuilder<Elem, Deps, Info> => {\n    return new NuBuilder<Elem, Deps, Info>(elt, args);\n};", "import type { EventSubscriber, EventType, StoreEvent, AnySubscriber } from \"../types.ts\";\nimport { ids } from \"../utils.ts\";\n\nconst storeId = ids('cf-store');\n\n/**\n * A simple reactive store.\n * @class Store\n * @public\n */\nexport class Store<T> {\n    /**\n     * A unique ID for the store, to track nested reactive elements to warn the user.\n     * @internal\n     */\n    id = storeId();\n\n    /**  The value of the store. */\n    protected value: T;\n    /** \n     * The subscribers currently registered to the store. \n     * @internal\n    */\n    _subscribers: {\n        [K in EventType]?: Record<number, EventSubscriber<K, Store<T>>>\n    } = {};\n    /** \n     * The subscribers currently registered to the store. \n     * @internal\n    */\n    _subscriberCounts: Record<string, number> = {};\n    /**\n     * A value describing whether or not the store has been disposed of.\n     * @internal\n     */\n    _dead = false;\n\n    /**\n     * Creates an instance of Store.\n     * @param value - The initial value of the store.\n     */\n    constructor(value: T) {\n        this.value = value;\n    }\n\n    /**\n     * Add an event listener to the store.\n     * @param type The type of event to listen for.\n     *   Supported event types include:\n     *   - `update`: Triggered when the store's value is updated via `update()`.\n     *   - `append`: For `ListStore` - Triggered when an item is added to the list.\n     *   - `deletion`: For `ListStore`/`MapStore` - Triggered when an item is removed.\n     *   - `change`: For `ListStore`/`MapStore`: Triggered when an item at an index/key\n     *     has its value set via the corresponding store's set() method.\n     *   - 'clear': Triggered when the store is cleared.\n     * @param fn A callback function that will be invoked when the specified event occurs.\n     *   The function receives a `StoreEvent` object with details about the event.\n     * @returns A unique subscriber ID that can be used to unsubscribe the listener.\n     */\n    on<K extends EventType>(type: K, fn: EventSubscriber<K, Store<T>>, callNow?: true): number {\n        this._subscriberCounts[type] ??= 0;\n        this._subscribers[type] ??= {};\n        const id = this._subscriberCounts[type]++;\n        this._subscribers[type][id] = fn;\n        // @ts-ignore this is not a problem\n        if (type === 'update' && callNow) fn({ type: 'update', value: this.value });\n        return this._subscriberCounts[type]++;\n    }\n\n    /**\n         * Subscribes the provided function to all store events.\n         * This is a convenience method that registers the function for 'change',\n         * 'append', 'clear', and 'deletion' events.\n         * \n         * @param fn A callback function that will be called for all store events\n         * @returns void\n         */\n    any(fn: AnySubscriber<Store<T>>) {\n        this.on('append', fn);\n        this.on('change', fn);\n        this.on('clear', fn);\n        this.on('deletion', fn);\n        this.on('update', fn);\n    }\n\n    /**\n     * Removes a specific event listener from the store.\n     * @param type The type of event from which to unsubscribe.\n     * @param id The subscriber ID returned by the `on()` method when the listener was registered.\n     * @throws Will throw an error if the subscriber ID is invalid or not found.\n     */\n    unsubscribe(type: EventType, id: number) {\n        delete this._subscribers[type]?.[id];\n    }\n\n    static isUpdater<T>(val: unknown): val is (arg: T) => T {\n        return typeof val === 'function';\n    }\n\n    /**\n     * Updates the store's value and notifies all subscribers.\n     * @param value The new value to set for the store.\n     * @emits 'change' event with the new value when successfully updated.\n     * @note No-op if the store has been disposed via `dispose()`.\n     */\n    update(value: (arg: T) => T): T | null;\n    update(value: T): T | null;\n    update(value: T | ((arg: T) => T)): T | null {\n        if (this._dead) return null;\n        let updated: T;\n        if (Store.isUpdater<T>(value)) {\n            updated = value(this.value);\n        }\n        else {\n            updated = value;\n        }\n        this.value = updated;\n        this._sendEvent({ type: 'update', value: updated });\n        return updated;\n    }\n\n    /**\n     * Sends an event to all subscribers if the store has not been disposed of.\n     * @internal\n    */\n    _sendEvent(event: StoreEvent<Store<T>>) {\n        if (this._dead) return;\n        const subs = this._subscribers[event.type] as Record<number, EventSubscriber<typeof event.type, Store<T>>>;\n        if (!subs) return;\n\n        for (const idx in subs) {\n            subs[idx](event);\n        }\n    }\n\n    /**\n     * Close the store so it no longer sends events.\n     */\n    dispose() {\n        this._dead = true;\n        this._subscribers = {};\n        this._subscriberCounts = {};\n    }\n\n    current() {\n        return structuredClone(this.value);\n    }\n\n    valueOf() {\n        return structuredClone(this.value);\n    }\n}", "import { Store } from \"./Store.ts\";\n\n/**\n    * A reactive list store.\n*/\nexport class ListStore<T> extends Store<T[]> {\n    constructor(ls?: T[]) {\n        super(ls || []);\n    }\n\n    /**\n     * Clears all elements from the store.\n     * @description Sets the store's value to an empty array and triggers a 'clear' event.\n     * @emits 'clear' event.\n     */\n    clear() {\n        this.value = [];\n        this._sendEvent({ type: \"clear\" });\n    }\n\n    /**\n     * Appends a new element to the end of the list.\n     * @param val The value to add to the list.\n     * @returns The new length of the list after appending.\n     * @emits 'append' event with:\n     *   - `value`: The appended item\n     *   - `idx`: The index where the item was inserted (length - 1)\n     */\n    push(val: T) {\n        this.value.push(val);\n        this._sendEvent({ type: \"append\", value: val, idx: this.value.length - 1 });\n        return this.value.length;\n    }\n\n    /**\n     * Removes the element at the specified index.\n     * @param idx The index of the element to remove.\n     * @throws {RangeError} If the index is out of bounds.\n     * @emits 'deletion' event with:\n     *   - `value`: The removed item\n     *   - `idx`: The index from which the item was removed\n     */\n    remove(idx: number) {\n        if (idx < 0) return; // fail quietly incase findIndex() was passed\n        if (idx >= this.value.length) throw new RangeError(\"Invalid index.\");\n        this._sendEvent({\n            type: 'deletion',\n            idx,\n            value: this.value.splice(idx, 1)[0]\n        });\n    }\n\n    /**\n     * Retrieves the element at the specified index.\n     * @param idx The index of the element to retrieve.\n     * @returns The element at the specified index.\n     * @throws {RangeError} If the index is out of bounds.\n     */\n    get(idx: number) {\n        if (idx < 0 || idx >= this.value.length) throw new RangeError(\"Invalid index.\");\n        return this.value[idx];\n    }\n\n    /**\n     * Sets the value of an element at a specific index.\n     * @param idx The index of the element to modify.\n     * @param value The new value to set at the specified index.\n     * @throws {RangeError} If the index is out of bounds.\n     * @emits 'change' event with:\n     *   - `value`: The new value\n     *   - `idx`: The index of the modified element\n     */\n    set(idx: number, value: T) {\n        if (idx < 0 || idx >= this.value.length) throw new RangeError(\"Invalid index.\");\n        this.value[idx] = value;\n        this._sendEvent({ type: \"change\", value, idx });\n    }\n\n    [Symbol.iterator]() {\n        return this.value[Symbol.iterator]();\n    }\n\n    map: (...args: Parameters<T[]['map']>) => ReturnType<T[]['map']> = (...args) => {\n        return this.value.map(...args);\n    };\n\n    forEach: (...args: Parameters<T[]['forEach']>) => ReturnType<T[]['forEach']> = (...args) => {\n        return this.value.forEach(...args);\n    };\n\n\n    findIndex: (...args: Parameters<T[]['findIndex']>) => ReturnType<T[]['findIndex']> = (...args) => {\n        return this.value.findIndex(...args);\n    };\n\n    /**\n     * Utility accessor to find the length of the store.\n     */\n    get length() {\n        return this.value.length;\n    }\n}\n", "import { Store } from \"./Store.ts\";\n\n/**\n * A reactive map store.\n * Implements set(key, value), remove(key), clear(), transform(key, fn), has(key), entries(), \n * and get(key).\n * set() sends a \"change\" event, remove() sends a \"deletion\" event, clear() sends a \"clear\" event,\n * and transform() sends a \"change\" event.\n */\nexport class MapStore<T> extends Store<Record<string, T>> {\n\n    /**\n     * Constructor for MapStore.\n     * Initializes the store with the provided initial key-value pairs.\n     * @param init Initial key-value pairs to populate the store.\n     */\n    constructor(init?: Record<string, T>) {\n        super({});\n\n        // Populates the store with initial key-value pairs.\n        for (const [k, v] of Object.entries(init || {})) {\n            this.value[k] = v;\n        }\n    }\n\n    /**\n     * Sets a value for a specific key in the store.\n     * @param key The key to set or update.\n     * @param value The value to associate with the key.\n     * @emits 'change' event with:\n     *   - `key`: The key that was set or updated\n     *   - `value`: The new value associated with the key\n     */\n    set(key: string, value: T) {\n        this.value[key] = value;\n        this._sendEvent({ key, value, type: 'change' });\n    }\n\n    /**\n     * Removes a key-value pair from the store.\n     * @param key The key to remove.\n     * @emits 'deletion' event with:\n     *   - `key`: The key that was removed\n     *   - `value`: The current state of the map after deletion\n     */\n    remove(key: string) {\n        const value = this.value[key];\n        if (value === null || typeof value === 'undefined') return;\n        delete this.value[key];\n        this._sendEvent({ key, value, type: 'deletion' });\n    }\n\n    /**\n     * Removes all key-value pairs from the store.\n     * @emits 'clear' event indicating the store has been emptied.\n     */\n    clear() {\n        this.value = {};\n        this._sendEvent({ type: 'clear' });\n    }\n\n    /**\n     * Applies a transformation function to the value of a specific key.\n     * @param key The key whose value will be transformed.\n     * @param fn A function that takes the current value and returns a new value.\n     * @throws {Error} If the key does not exist in the store.\n     * @emits 'change' event with the transformed value (via internal `set` method)\n     */\n    transform(key: string, fn: (val: T) => T) {\n        const old = this.value[key];\n        if (!old) throw new Error(`ERROR: key ${key} does not exist in store!`);\n        const transformed = fn(old);\n        this.set(key, transformed);\n        this._sendEvent({ type: \"change\", value: transformed, key });\n    }\n\n    /**\n     * Retrieves the value associated with a specific key.\n     * @param key The key to look up.\n     * @returns The value associated with the key, or undefined if the key does not exist.\n     */\n    get(key: string) {\n        return structuredClone(this.value[key]);\n    }\n\n    has(key: string): boolean {\n        return Object.hasOwn(this.value, key);\n    }\n\n    entries() {\n        return Object.entries(this.value);\n    }\n\n    get size() {\n        return Object.keys(this.value).length;\n    }\n}\n", "import { ListStore } from \"./ListStore.ts\";\nimport { MapStore } from \"./MapStore.ts\";\nimport { Store } from \"./Store.ts\";\n\nexport type StoreInitializer<T> =\n    | { type: 'list'; value?: Array<T> }\n    | { type: 'map'; value?: Record<string, T> }\n    | { value?: T };\n\nexport function store<T>(opts: { type: 'list'; value?: T[] }): ListStore<T>;\nexport function store<T>(opts: { type: 'map'; value?: Record<string, T> }): MapStore<T>;\nexport function store<T>(opts: { value: T }): Store<T>;\nexport function store<T>(opts: { value?: T }): Store<T | undefined>;\nexport function store<T>(opts: StoreInitializer<T>): Store<any> {\n    if ('type' in opts) {\n        if (opts.type === 'list') return new ListStore(opts.value);\n        if (opts.type === 'map') return new MapStore(opts.value);\n    }\n    return new Store(opts.value);\n}\n\nexport { Store, ListStore, MapStore };", "import { escape } from '../utils.ts';\n\n/**\n * Represents a plain text token in a mustache template\n */\ninterface TextToken {\n    type: 'text',\n    value: string\n};\n\n/**\n * Represents a section token (opening or closing) in a mustache template\n */\ntype SectionToken = { key: string } & ({\n    type: 'section-open';\n    inverted: boolean;\n} | {\n    type: 'section-close';\n});\n\n/**\n * Represents a variable token in a mustache template\n */\ninterface VariableToken {\n    type: 'var',\n    key: string,\n    unescaped: boolean;\n}\n\n/**\n * Union type for all possible mustache token types\n */\ntype MustacheToken = (SectionToken | TextToken | VariableToken);\n\n/**\n * Tokenizes a mustache template string into individual tokens\n * \n * @param template - The template string to tokenize\n * @returns An array of tokens representing the template\n */\nconst tokenize = (template: string) => {\n    const re = /\\\\?({{{\\s*([^}]+)\\s*}}}|{{[#^/]?\\s*([^}]+)\\s*}})/g;\n    let index = 0;\n    const tokens: MustacheToken[] = [];\n    let match = re.exec(template);\n\n    while (match !== null) {\n        const [chunk, mustache, unsafeKey, key] = match;\n        const escaped = chunk.startsWith('\\\\');\n        const tag = chunk.length > 2 ? chunk[2] : null;\n\n        if (index < match.index) {\n            tokens.push({ type: 'text', value: template.slice(index, match.index) });\n        }\n        if (escaped) {\n            tokens.push({ type: 'text', value: mustache });\n        }\n        else if (tag === '/') {\n            tokens.push({ type: 'section-close', key });\n        }\n        else if (tag === '#' || tag === '^') {\n            tokens.push({ type: 'section-open', key: key?.trim(), inverted: tag === '^' });\n        }\n        else {\n            tokens.push({ type: 'var', key: (unsafeKey || key)?.trim(), unescaped: !!unsafeKey });\n        }\n\n        index = re.lastIndex;\n        match = re.exec(template);\n    }\n\n    if (index < template.length) {\n        tokens.push({ type: 'text', value: template.slice(index) });\n    }\n\n    return tokens;\n}\n\n/**\n * Represents a compiled section in a mustache template\n */\ninterface CompiledSection {\n    type: 'section';\n    inverted: boolean;\n    key: string;\n    children: CompiledToken[]\n}\n\n/**\n * Union type for all compiled token types\n */\ntype CompiledToken = TextToken | VariableToken | CompiledSection\n\n/**\n * Transforms a flat array of tokens into a nested structure with proper section hierarchy\n * \n * @param tokens - The flat array of tokens to nest\n * @returns A nested token tree representing the template structure\n * @throws Error if sections are improperly nested or unclosed\n */\nfunction nest(tokens: MustacheToken[]) {\n    const root: CompiledToken[] = [];\n    const stack = [root];\n\n    for (const token of tokens) {\n        if (token.type === 'section-open') {\n            const section: CompiledSection = {\n                type: 'section',\n                key: token.key,\n                inverted: token.inverted,\n                children: []\n            };\n\n            stack.at(-1)?.push(section);\n            stack.push(section.children);\n        }\n        else if (token.type === 'section-close') {\n            if (stack.length === 1) throw new Error(`Unexpected closing tag ${token.key}`);\n            stack.pop();\n        }\n        else {\n            stack.at(-1)?.push(token);\n        }\n    }\n\n    if (stack.length > 1) {\n        throw new Error(`Unclosed section(s) found`);\n    }\n\n    return root;\n}\n\n/**\n * Compiles a mustache template string into a token tree\n * \n * @param template - The template string to compile\n * @returns A compiled token tree representing the template\n */\nconst compile = (template: string) => nest(tokenize(template));\n\n/**\n * Renders a compiled token tree with the provided context data\n * \n * @param tokens - The compiled token tree to render\n * @param ctx - The context object containing data for rendering\n * @param parentCtx - Optional parent context for nested rendering\n * @returns The rendered string result\n */\nconst render = <\n    T extends Record<string, any>\n>(tokens: CompiledToken[], ctx: T, parentCtx?: Record<string, any>): string => tokens.map(token => {\n    switch (token.type) {\n        case \"text\":\n            return token.value;\n        case \"var\": {\n            if (token.key === '.' && '.' in ctx) {\n                return token.unescaped\n                    ? String(ctx['.'])\n                    : escape(String(ctx['.']));\n            }\n\n            if (!(token.key in ctx)) {\n                return token.unescaped ? `{{{ ${token.key} }}}` : `{{ ${token.key} }}`;\n            }\n\n            const val = String(ctx[token.key]);\n            return token.unescaped ? val : escape(val);\n        }\n        case \"section\": {\n            const v = ctx[token.key];\n            let visible = !!v;\n\n            if (token.inverted) {\n                visible = (v === null || v === false || typeof v === 'undefined' ||\n                    (Array.isArray(v) && v.length === 0));\n            }\n\n            if (!visible) return '';\n            if (token.inverted) return render(token.children, ctx, parentCtx);\n\n            if (Array.isArray(v)) return v\n                .map(item => render(token.children, typeof item === 'object' ? item : { '.': item }, ctx)\n                ).join('');\n\n            else if (typeof v === 'object' && v !== null)\n                return render(token.children, v, ctx);\n            else\n                return render(token.children, ctx, parentCtx);\n        }\n    }\n}).join('');\n\n/**\n * Renders a mustache template with the provided context data.\n * \n * @param template - The template string to render\n * @param ctx - The context object containing data for rendering\n * @returns The rendered string result\n * \n * @example\n * ```js\n * const result = mustache(\"Hello, {{ name }}!\", { name: \"World\" });\n * // result: \"Hello, World!\"\n * ```\n * \n * @example Using sections\n * ```js\n * const result = mustache(\n *   \"{{#show}}Visible{{/show}} {{^hide}}Also Visible{{/hide}}\",\n *   { show: true, hide: false }\n * );\n * // result: \"Visible Also Visible\"\n * ```\n * \n * @example Using array iteration\n * ```js\n * const result = mustache(\n *   \"Items: {{#items}}{{name}}{{/items}}\",\n *   { items: [{ name: \"one\" }, { name: \"two\" }] }\n * );\n * // result: \"Items: onetwo\"\n * ```\n */\nexport const mustache = <\n    T extends Record<string, any> = Record<string, any>\n>(template: string, ctx: T): string => {\n    return render<T>(compile(template), ctx);\n}\n\n/**\n * Creates a reusable template function from a mustache template string.\n * \n * @param template - The template string to compile\n * @returns A function that accepts a context object and returns the rendered string\n * \n * @example\n * ```js\n * const greet = template(\"Hello, {{ name }}!\");\n * const result1 = greet({ name: \"Alice\" }); // \"Hello, Alice!\"\n * const result2 = greet({ name: \"Bob\" });   // \"Hello, Bob!\"\n * ```\n */\nexport const template = <\n    T extends Record<string, any> = Record<string, any>\n>(template: string): (ctx: T) => string => {\n    const compiled = compile(template);\n    return (ctx) => render<T>(compiled, ctx);\n}\n", "import { insert, empty, rm, select, onload } from \"./dom/mod.ts\"\nimport { extend, nu } from \"./dom/nu.ts\"\nimport { NuBuilder } from \"./dom/NuBuilder.ts\"\nimport { ListStore, MapStore, Store, store } from \"./stores/mod.ts\"\nimport { html, r } from \"./templating/html.ts\"\nimport { mustache, template } from \"./templating/mustache.ts\"\nimport { seq, escape, unescape, callbackify, poll, ids } from './utils.ts'\nimport { CfDom } from \"./dom/mod.ts\";\n\nimport type { SelectParams } from \"./dom/mod.ts\";\nimport type { RawHtmlOptions } from \"./templating/html.ts\";\nimport type { ElementPosition, ElementProperties, AnySubscriber, EventSubscriber, Template } from \"./types.ts\"\nimport type { Callback, Callbackified } from \"./utils.ts\";\nimport { track, tracked, untrack } from \"./dom/tracking.ts\";\n\nexport default {\n    ListStore,\n    MapStore,\n    Store,\n    store,\n    nu,\n    mustache,\n    template,\n    escape,\n    unescape,\n    extend,\n    insert,\n    empty,\n    rm,\n    select,\n    onload,\n    html,\n    r,\n    seq,\n    CfDom,\n    callbackify,\n    poll,\n    ids,\n    track,\n    tracked,\n    untrack\n}\n\nexport {\n    ListStore,\n    MapStore,\n    Store,\n    store,\n    nu,\n    mustache,\n    template,\n    escape,\n    unescape,\n    extend,\n    insert,\n    empty,\n    rm,\n    select,\n    onload,\n    html,\n    r,\n    seq,\n    CfDom,\n    callbackify,\n    poll,\n    ids,\n    track,\n    tracked,\n    untrack\n}\n\nexport type {\n    ElementPosition,\n    ElementProperties,\n    AnySubscriber,\n    EventSubscriber,\n    Template,\n    NuBuilder,\n    SelectParams,\n    RawHtmlOptions,\n    Callback,\n    Callbackified\n}"],
  "mappings": "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",
  "names": ["elt", "render", "r", "track", "template", "mustache"]
}

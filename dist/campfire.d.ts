import { insert, empty, rm, select, onload } from "./dom/mod.ts";
import { extend, nu } from "./dom/nu.ts";
import { NuBuilder } from "./dom/NuBuilder.ts";
import { ListStore, MapStore, Store, store } from "./stores/mod.ts";
import { html, r } from "./templating/html.ts";
import { mustache, template } from "./templating/mustache.ts";
import { seq, escape, unescape, callbackify, enumerate, poll } from './utils.ts';
import { CfDom } from "./dom/mod.ts";
import type { SelectParams } from "./dom/mod.ts";
import type { RawHtmlOptions } from "./templating/html.ts";
import type { ElementPosition, ElementProperties, AnySubscriber, EventSubscriber, Template } from "./types.ts";
import type { Callback, Callbackified } from "./utils.ts";
declare const _default: {
    ListStore: typeof ListStore;
    MapStore: typeof MapStore;
    Store: typeof Store;
    store: typeof store;
    nu: <const T extends string, E extends import("./types.ts").InferElementType<T>, D extends Record<string, Store<any>>>(info?: T, args?: ElementProperties<E, D>) => NuBuilder<T, E, D>;
    mustache: (string: string, data?: Record<string, string>, shouldEscape?: boolean) => string;
    template: (str: string, shouldEscape?: boolean) => Template;
    escape: (str: string) => string;
    unescape: (str: string) => string;
    extend: <T extends HTMLElement, D extends Record<string, Store<any>>>(elt: T, args?: ElementProperties<T, D>) => [T, ...HTMLElement[]];
    insert: (els: Element | Element[], where: ElementPosition) => Element | Element[];
    empty: (elt: Element) => void;
    rm: (elt: Element) => void;
    select: typeof select;
    onload: (cb: (ev: Event) => void) => void;
    html: (strings: TemplateStringsArray, ...values: (string | number | import("./templating/html.ts").RawHtml)[]) => string;
    r: (val: any, options?: RawHtmlOptions) => import("./templating/html.ts").RawHtml;
    seq: (...args: number[]) => number[];
    CfDom: typeof CfDom;
    callbackify: <T extends any[], U = unknown, E = any>(fn: (...args: T) => Promise<U>) => Callbackified<T, U, E>;
    enumerate: <T>(arr: T[]) => (readonly [number, T])[];
    poll: (fn: () => void, interval: number, callNow?: boolean) => () => void;
};
export default _default;
export { ListStore, MapStore, Store, store, nu, mustache, template, escape, unescape, extend, insert, empty, rm, select, onload, html, r, seq, CfDom, callbackify, enumerate, poll };
export type { ElementPosition, ElementProperties, AnySubscriber, EventSubscriber, Template, NuBuilder, SelectParams, RawHtmlOptions, Callback, Callbackified };

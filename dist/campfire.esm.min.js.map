{
  "version": 3,
  "sources": ["../src/dom/mod.ts", "../src/utils.ts", "../src/dom/NuBuilder.ts", "../src/dom/nu.ts", "../src/stores/Store.ts", "../src/stores/ListStore.ts", "../src/stores/MapStore.ts", "../src/stores/mod.ts", "../src/templating/html.ts", "../src/templating/mustache.ts", "../src/campfire.ts"],
  "sourcesContent": ["import type { ElementPosition } from \"../types.ts\";\n\n/**\n * Inserts an element into the DOM given a reference element and the relative position\n * of the new element.\n * \n * * if `where` looks like `{ after: reference }`, the element is inserted into `reference`'s\n * parent, after `reference`.\n * * if `where` looks like `{ before: reference }`, the element is inserted into `reference`'s\n * parent, before `reference`.\n * * if `where` looks like `{ into: reference, at: 'start' }`, the element is inserted into \n * `reference`, before its first child.\n * * if `where` looks like `{ into: reference }`, the element is inserted into `reference`,\n * after its last child.\n * @param els The element(s) to insert.\n * @param where An object specifying where to insert `elem` relative to another element.\n * @throws an Error when there are no valid keys ('into', 'after', or 'before') present in `where`.\n * @returns the element that was inserted, so you can do `const a = insert(nu(), _)`.\n */\nexport const insert = (els: Element | Element[], where: ElementPosition) => {\n    // Check we have at least one valid key\n    if (!('into' in where) && !('after' in where) && !('before' in where)) {\n        throw new Error(\"No valid position specified. Use 'into', 'after', or 'before'.\");\n    }\n\n    let position: InsertPosition = 'beforeend';\n    let ref: Element;\n\n    if ('after' in where) {\n        position = 'afterend';\n        ref = where.after;\n    } else if ('before' in where) {\n        position = 'beforebegin';\n        ref = where.before;\n    } else if ('into' in where && where.at === 'start') {\n        position = 'afterbegin';\n        ref = where.into;\n    } else {\n        ref = where.into;\n    }\n\n    const frag = document.createDocumentFragment();\n    if (Array.isArray(els)) {\n        for (const item of els) frag.appendChild(item);\n    }\n    else {\n        frag.appendChild(els);\n    }\n\n    if (position === 'beforebegin') {\n        ref.parentNode?.insertBefore(frag, ref);\n    } else if (position === 'afterend') {\n        ref.parentNode?.insertBefore(frag, ref.nextSibling);\n    } else if (position === 'afterbegin') {\n        ref.insertBefore(frag, ref.firstChild);\n    } else {\n        ref.appendChild(frag);\n    }\n\n    return els;\n};\n\n/**\n * Fires a callback when the DOMContentLoaded event fires.\n * @param cb The callback to run.\n * @returns void\n */\nexport const onload = (cb: (ev: Event) => void) => globalThis.addEventListener('DOMContentLoaded', cb);\n\nexport type SelectParams = {\n    /** The selector to query for. */\n    s: string;\n    /** The parent node to query. Defaults to `document`. */\n    from?: ParentNode;\n    /** Whether to return all elements matching the given selector or just the first. */\n    all?: true;\n}\n\n/**\n * Queries the DOM for a particular selector, and returns the first element matching it.\n * @param opts See SelectParams.\n * @returns Element(s) matching the given selector, or an empty list.\n */\nexport function select(params: SelectParams & { single: true }): HTMLElement | null;\nexport function select(params: SelectParams & { single?: false }): HTMLElement[];\nexport function select({ s, all, from, single }: SelectParams & { single?: boolean }) {\n    from ??= document;\n    if (all) {\n        return Array.from(from.querySelectorAll(s)) as HTMLElement[];\n    }\n\n    const elt = from.querySelector(s);\n    return single ? elt : [elt];\n}\n\n/**\n * Removes `elt` from the DOM.\n * @param elt The element to remove.\n * @returns void\n */\nexport const rm = (elt: Element) => elt.remove();\n\n/**\n * Empties a DOM element of its content.\n * @param elt The element to empty.\n */\nexport const empty = (elt: Element) => {\n    elt.innerHTML = '';\n};", "/**\n * a simple HTML sanitizer. Escapes `&`, `<`, `>`, `'`, and `\"` by \n * replacing them with their corresponding HTML escapes \n * (`&amp;`,`&gt;`, `&lt;`, `&#39;`, and `&quot`).\n * @param str A string to escape.\n * @returns The escaped string.\n * No characters other than the ones mentioned above are escaped.\n * `escape` is only provided for basic protection against XSS and if you need more\n * robust functionality consider using another HTML escaper (such as\n * [he](https://github.com/mathiasbynens/he) or \n * [sanitize-html](https://github.com/apostrophecms/sanitize-html)).\n */\nexport const escape = (str: string) => {\n    if (!str) return '';\n\n    return str.replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;');\n}\n\n/**\n * Unescapes the output of escape() by replacing `&amp;`, `&gt;`, `&lt;`,\n * `&#39;`, and `&quot` with `&`, `<`, `>`, `'`, and `\"` respectively.\n * @param str A string to unescape.\n * @returns The string, with its character references replaced by the characters it references.\n * No characters other than the ones mentioned above are unescaped.\n */\nexport const unescape = (str: string) => {\n    if (!str) return '';\n    const expr = /&(?:amp|lt|gt|quot|#(0+)?39);/g;\n\n    const entities: Record<string, string> = {\n        '&amp;': '&',\n        '&lt;': '<',\n        '&gt;': '>',\n        '&quot;': '\"',\n        '&#39;': \"'\"\n    };\n\n    return str.replace(expr, (entity) => entities[entity] || '\\'');\n}\n\nexport const seq = (...args: number[]) => {\n    let start = 0, stop = args[0], step = 1;\n    if (typeof args[1] !== 'undefined') {\n        start = args[0];\n        stop = args[1];\n    }\n\n    if (args[2]) step = args[2];\n    const result = [];\n    for (let i = start; i < stop; i += step) {\n        result.push(i);\n    }\n\n    return result;\n}\n\nconst fmtNode = (node: HTMLElement) => {\n    const result = ['<'];\n    result.push(node.tagName.toLowerCase());\n    if (node.id) result.push(`#${node.id}`);\n    if (node.className.trim()) result.push(`.${node.className.split(' ').join('.')}`);\n    result.push(...Array.from(node.attributes)\n        .map(attr => `${attr.name}=\"${attr.value}\"`)\n        .slice(0, 3) // limit to 3 attributes\n        .join(' '));\n    return result.join('');\n}\n\nexport const initMutationObserver = () => {\n    const observer = new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            mutation.addedNodes.forEach(node => {\n                if (!(node instanceof HTMLElement)) return;\n\n                // Check parent is reactive\n                const parent = mutation.target as HTMLElement;\n                if (!parent.hasAttribute('data-cf-deps')) return;\n                if (parent.hasAttribute('data-cf-fg-updates')) return;\n\n                // Check if added node (or its children) are also reactive\n                const reactiveChildren = node.querySelectorAll?.('[data-cf-deps]').length ?? 0;\n                if (!node.hasAttribute?.('data-cf-deps') && reactiveChildren === 0) return;\n\n                console.warn(`[Campfire] \u26A0\uFE0F A reactive node ${fmtNode(node)} was inserted into a reactive ` +\n                    `container ${fmtNode(parent)} This may cause it to be wiped on re-render.`);\n\n            })\n        }\n    });\n\n    if (!document.body.hasAttribute('cf-disable-mo'))\n        observer.observe(document.body, { childList: true, subtree: true });\n}", "import { Store } from \"../stores/mod.ts\";\nimport type {\n    ElementProperties,\n    InferElementType,\n    RenderFunction,\n    StringStyleProps,\n    TagStringParseResult,\n    DOMEventHandlers\n} from \"../types.ts\";\nimport { extend } from \"./nu.ts\";\n\n\n/**\n * Creates a typed HTML element based on the tag name.\n * \n * @param name - The HTML tag name.\n * @returns A newly created HTML element of the specified type.\n * @internal\n */\nconst createTypedElement = <K extends keyof HTMLElementTagNameMap>(name: K) => {\n    return document.createElement(name);\n}\n\n/**\n * Parses a tag string into its component parts.\n * \n * @param str A string to parse, of the form tag#id.classes[.classes].\n * @returns A `TagStringParseResult` object containing the parsed information.\n * @internal\n */\nconst parseEltString = (str: string | undefined): TagStringParseResult => {\n    const matches = str ? str.match(/([0-9a-zA-Z\\-]*)?(#[0-9a-zA-Z\\-]*)?((.[0-9a-zA-Z\\-]+)*)/) : undefined;\n    const results = matches ? matches.slice(1, 4)?.map((elem) => elem ? elem.trim() : undefined) : Array(3).fill(undefined);\n\n    if (results && results[1]) results[1] = results[1].replace(/#*/g, \"\");\n\n    return matches ? {\n        tag: results[0] || undefined,\n        id: results[1] || undefined,\n        classes: results[2] ? results[2].split('.').filter((elem: string) => elem.trim()) : undefined\n    } : {};\n};\n\n/**\n * Builder class for creating and configuring HTML elements using a fluent API.\n * \n * This class provides a chainable interface for configuring element properties\n * before creating the actual DOM element with the `done()` method.\n * \n * @example\n * ```typescript\n * // Create a button with multiple options\n * const [button] = nu('button#submit.primary')\n *   .content('Submit')\n *   .attr('type', 'submit')\n *   .on('click', () => console.log('Clicked!'))\n *   .style('backgroundColor', 'blue')\n *   .done();\n * ```\n */\nexport class NuBuilder<T extends string, E extends InferElementType<T>, D extends Record<string, Store<any>>> {\n    /** Element properties configuration object */\n    props: ElementProperties<E, D> = {};\n\n    /** Element info string (tag, id, classes) */\n    info: T;\n\n    /**\n     * Creates a new NuBuilder instance.\n     * \n     * @param info - A string describing the element in the format 'tag#id.class1.class2'\n     * @param props - Optional initial properties for the element\n     */\n    constructor(info: T, props?: ElementProperties<E, D>) {\n        if (props) this.props = props;\n        this.info = info;\n    }\n\n    /**\n     * Finalizes the builder and creates the actual DOM element with all configured properties.\n     * \n     * @returns A tuple containing the created element as the first item, followed by any child elements\n     * @throws Error if a class name contains a '#' character\n     */\n    done(): [E, ...HTMLElement[]] {\n        let { tag, id, classes = [] } = parseEltString(this.info);\n\n        if (classes?.some((itm) => itm.includes('#'))) {\n            throw new Error(\n                \"Error: Found # in a class name. \" +\n                \"Did you mean to do elt#id.classes instead of elt.classes#id?\"\n            );\n        }\n\n        if (!tag) tag = 'div';\n        const elem = createTypedElement(tag as keyof HTMLElementTagNameMap);\n\n        if (id) elem.id = id;\n        classes.forEach((cls) => elem.classList.add(cls));\n\n        return extend(elem as E, this.props);\n    }\n\n    ref() {\n        return this.done()[0];\n    }\n\n    /**\n     * Sets the content of the element.\n     * \n     * @param value - Either a string of content or a render function that returns content\n     * @returns The builder instance for chaining\n     */\n    content(value: string | RenderFunction<E, D>) {\n        this.props.contents = value;\n        return this;\n    }\n\n    /**\n     * Sets a single attribute on the element.\n     * \n     * @param name - The attribute name\n     * @param value - The attribute value\n     * @returns The builder instance for chaining\n     */\n    attr(name: string, value: string | boolean | number) {\n        this.props.attrs ||= {};\n        this.props.attrs[name] = value.toString();\n        return this;\n    }\n\n    /**\n     * Sets multiple attributes on the element at once.\n     * \n     * @param value - An object containing attribute name-value pairs\n     * @returns The builder instance for chaining\n     */\n    attrs(value: ElementProperties<E, D>['attrs']) {\n        this.props.attrs = value;\n        return this;\n    }\n\n    /**\n     * Sets whether the content value should be treated as raw HTML.\n     * \n     * @param value - If true, content will not be escaped before setting innerHTML\n     * @returns The builder instance for chaining\n     */\n    raw(value: boolean) {\n        this.props.raw = value;\n        return this;\n    }\n\n    /**\n     * Sets miscellaneous properties on the element (e.g. `input.checked`).\n     * \n     * @param obj - Either a property name or an object containing multiple properties\n     * @param value - The value for the property if obj is a property name\n     * @returns The builder instance for chaining\n     */\n    misc(obj: string, value: unknown): NuBuilder<T, E, D>;\n    misc(obj: Record<string, unknown>): NuBuilder<T, E, D>;\n    misc(obj: string | Record<string, unknown>, value?: unknown): NuBuilder<T, E, D> {\n        this.props.misc ||= {};\n        if (typeof obj === 'object') this.props.misc = obj;\n        else this.props.misc[obj] = value;\n        return this;\n    }\n\n    /**\n     * Sets a single CSS style property on the element.\n     * \n     * @param prop - The CSS property name\n     * @param value - The CSS property value\n     * @returns The builder instance for chaining\n     */\n    style(prop: StringStyleProps, value: string) {\n        this.props.style ||= {};\n        this.props.style[prop] = value;\n        return this;\n    }\n\n    /**\n     * Sets multiple CSS style properties on the element at once.\n     * \n     * @param value - An object containing style name-value pairs\n     * @returns The builder instance for chaining\n     */\n    styles(value: ElementProperties<E, D>['style']) {\n        this.props.style = value ?? {};\n        return this;\n    }\n\n    /**\n     * Attaches an event handler to the element.\n     * \n     * @param type - The event type to listen for (e.g., 'click', 'submit')\n     * @param handler - The event handler function\n     * @returns The builder instance for chaining\n     */\n    on<K extends keyof HTMLElementEventMap>(type: K, handler: (event: HTMLElementEventMap[K]) => void) {\n        this.props.on ||= {};\n        this.props.on[type] = handler as DOMEventHandlers[K];\n        return this;\n    }\n\n    /**\n     * Specifies selectors for elements that should be retrieved after building the element.\n     * \n     * @param selectors - A single selector string or an array of selector strings\n     * @returns The builder instance for chaining\n     */\n    gimme(...selectors: string[]) {\n        this.props.gimme ||= [];\n        this.props.gimme = selectors;\n        return this;\n    }\n\n    deps<ND extends Record<string, Store<any>>>(obj: ND): NuBuilder<T, E, D & ND> {\n        this.props.deps = { ...(this.props.deps as D), ...obj };\n        return this as unknown as NuBuilder<T, E, D & ND>;\n    }\n\n    /**\n     * Unsafely set the html of the object. This is equivalent to calling\n     * .content(...).raw(true) and is meant to be used with a templating function\n     * like `cf.html`.\n     * @param value The content function / string to set.\n     * @returns The builder for chaining.\n     */\n    html(value: string | RenderFunction<E, D>) {\n        return this.content(value).raw(true);\n    }\n\n    /**\n     * Mount reactive children into a parent element. The children are preserved\n     * across re-renders and can be independently reactive.\n     * @param children An object whose keys correspond to the `name` attributes \n     * of cf-slot elements in the parent's innerHTML.\n     * @returns The builder object for chaining.\n     */\n    children(children: Record<string, HTMLElement>) {\n        this.props.children = children;\n        return this;\n    }\n}", "import type { Store } from \"../stores/mod.ts\";\nimport type { ElementProperties, InferElementType, RenderFunction, UnwrapStore } from \"../types.ts\";\nimport { escape, initMutationObserver } from \"../utils.ts\";\nimport { select } from \"./mod.ts\";\nimport { NuBuilder } from \"./NuBuilder.ts\";\n\nif (\"MutationObserver\" in globalThis) initMutationObserver();\nelse {\n    console.warn(\n        \"MutationObserver was not found in your browser. Campfire will\",\n        \"not be able to warn you of destructive mutations!\",\n    );\n}\n\nconst unwrapDeps = <D extends Record<string, Store<any>>>(\n    deps: D\n): UnwrapStore<D> => {\n    const result: any = {};\n    for (const key in deps) {\n        const value = deps[key].value;\n        if (value instanceof Map) {\n            result[key] = Object.fromEntries(value.entries());\n        } else {\n            result[key] = value.valueOf();\n        }\n    }\n    return result;\n};\n\nconst isValidRenderFn = <T extends HTMLElement>(\n    fn: ElementProperties<T, any>[\"contents\"],\n): fn is RenderFunction<T, any> => {\n    if (!fn) return false;\n    if (typeof fn !== \"function\") return false;\n    return true;\n};\n\n/**\n * Takes an existing element and modifies its properties.\n * Refer ElementProperties documentation for details on\n * what can be changed.\n * @param elt The element to modify.\n * @param args Properties to set on the element.\n */\nexport const extend = <\n    T extends HTMLElement,\n    D extends Record<string, Store<any>> = {},\n>(\n    elt: T,\n    args: ElementProperties<T, D> = {},\n): [T, ...HTMLElement[]] => {\n    let { contents, misc, style, on = {}, attrs = {}, raw, gimme = [], deps = ({} as D), children = {} } = args;\n\n    let content = \"\";\n    if (isValidRenderFn<T>(contents)) {\n        Object.entries(deps).forEach(([name, dep]) => {\n            dep.any((evt) => {\n                const res = contents(unwrapDeps(deps), { event: { ...evt, triggeredBy: name }, elt });\n\n                if (res !== undefined) {\n                    const reactiveChildren = select({ s: '[data-cf-slot]', all: true, from: elt })\n                        .map(elt => [elt.getAttribute('data-cf-slot'), elt]) as [string, HTMLElement][];\n                    elt.innerHTML = res;\n                    reactiveChildren.forEach(([slot, ref]) => {\n                        elt.querySelector(`cf-slot[name='${slot}']`)?.replaceWith(ref);\n                    })\n                }\n            });\n        });\n\n        const result = contents(unwrapDeps(deps), { elt });\n\n        if (typeof result === \"undefined\") elt.setAttribute(\"data-cf-fg-updates\", \"true\");\n        else elt.removeAttribute(\"data-cf-fg-updates\");\n\n        content = result || \"\";\n    } else if (typeof contents === \"string\") {\n        content = contents;\n    }\n\n    if (content?.trim()) {\n        elt.innerHTML = raw ? content : escape(content);\n        elt.querySelectorAll('cf-slot[name]').forEach(itm => {\n            const name = itm.getAttribute('name');\n            if (!name) return;\n            if (name in children) {\n                let val = children[name];\n                const [child] = Array.isArray(val) ? val : [val];\n                if (!child) return;\n                itm.replaceWith(child);\n                child.setAttribute('data-cf-slot', name);\n            }\n        })\n    }\n\n    const depIds = Object.values(deps).map((dep) => dep.id);\n    if (depIds.length) elt.setAttribute(\"data-cf-reactive\", \"true\");\n    else elt.removeAttribute(\"data-cf-reactive\");\n\n    if (misc) Object.assign(elt, misc);\n    if (style) Object.assign(elt.style, style);\n\n    Object.entries(on).forEach(([evt, listener]) => elt.addEventListener(evt, listener));\n\n    Object.entries(attrs).forEach(([attr, value]) => elt.setAttribute(attr, String(value)));\n\n    const extras: HTMLElement[] = [];\n    for (const selector of gimme) {\n        const found = elt.querySelector(selector);\n        // This is on purpose.\n        // The user will expect the items to be at the same indices\n        // as the selectors they supplied.\n        extras.push(found as HTMLElement);\n    }\n\n    return [elt, ...extras];\n};\n\n/**\n * An element creation helper.\n * @param info Basic information about the element.\n * `eltInfo` should be a string of the format `tagName#id.class1.class2`.\n * Each part (tag name, id, classes) is optional, and an infinite number of\n * classes is allowed. When `eltInfo` is an empty string, the tag name is assumed to be\n * `div`.\n * @param args Optional extra properties for the created element.\n * @returns The newly created DOM element and any other elements requested in the\n * `gimme` parameter specified in args.\n * @example\n * ```\n * cf.nu(`elt#id.class1`, {\n *  raw: true,\n *  c: html`<span class=some-span>foo bar</span>`,\n *  gimme: ['.some-span']\n * }) // Output: [<elt#id.class1>, <the span some-span>]\n * ```\n * @example\n * ```\n * cf.nu(`span.some-span`, {\n *  // properties...\n *  // no gimme specified\n * }) // Output is still a list [<span.some-span>]\n * ```\n */\nexport const nu = <\n    const T extends string,\n    E extends InferElementType<T>,\n    D extends Record<string, Store<any>> = {},\n>(\n    info: T = 'div' as T,\n    args: ElementProperties<E, D> = {},\n): NuBuilder<T, E, D> => {\n    return new NuBuilder<T, E, D>(info, args);\n};", "import type { StoreEvent, Subscriber } from \"../types.ts\";\n\nconst storeIds = new Set<string>();\nconst genId = () => 'cf-' + Math.random().toString(36).slice(2, 8);\n\nconst storeId = () => {\n    let id = genId();\n    while (storeIds.has(id)) id = genId();\n    storeIds.add(id);\n    return id;\n}\n\n/**\n * A simple reactive store.\n * @class Store\n * @public\n */\nexport class Store<T> {\n    /**\n     * A unique ID for the store, to track nested reactive elements to warn the user.\n     * @internal\n     */\n    id = storeId();\n\n    /**  The value of the store. */\n    value: T;\n    /** \n     * The subscribers currently registered to the store. \n     * @internal\n    */\n    _subscribers: {\n        [K in StoreEvent['type']]?: Record<number, Subscriber>;\n    } = {};\n    /** \n     * The subscribers currently registered to the store. \n     * @internal\n    */\n    _subscriberCounts: Record<string, number> = {};\n    /**\n     * A value describing whether or not the store has been disposed of.\n     * @internal\n     */\n    _dead = false;\n\n    /**\n     * Creates an instance of Store.\n     * @param value - The initial value of the store.\n     */\n    constructor(value?: T) {\n        if (typeof value !== 'undefined' && value !== null) this.value = value;\n    }\n\n    /**\n * Add an event listener to the store.\n * @param type The type of event to listen for.\n *   Supported event types include:\n *   - 'change': Triggered when the store's value is updated via `update()`.\n *   - 'append': For ListStore - Triggered when an item is added to the list.\n *   - 'deletion': For ListStore/MapStore - Triggered when an item is removed.\n *   - 'clear': Triggered when the store is cleared.\n * @param fn A callback function that will be invoked when the specified event occurs.\n *   The function receives a `StoreEvent` object with details about the event.\n * @param callNow Determines whether the callback should be immediately invoked \n *   with the current store value. Only applies to 'change' event type.\n * @returns A unique subscriber ID that can be used to unsubscribe the listener.\n */\n    on(type: StoreEvent['type'], fn: Subscriber, callNow: boolean = false): number {\n        this._subscriberCounts[type] = this._subscriberCounts[type] || 0;\n        this._subscribers[type] ??= {};\n        this._subscribers[type]![this._subscriberCounts[type]] = fn;\n        if (callNow && ![\"push\", \"remove\", \"mutation\", \"setAt\"].includes(type)) {\n            fn({ type: 'change', value: this.value });\n        }\n        return this._subscriberCounts[type]++;\n    }\n\n    /**\n         * Subscribes the provided function to all store events.\n         * This is a convenience method that registers the function for 'change',\n         * 'append', 'clear', and 'deletion' events.\n         * \n         * @param fn A callback function that will be called for all store events\n         * @returns void\n         */\n    any(fn: Subscriber) {\n        this.on('append', fn);\n        this.on('change', fn);\n        this.on('clear', fn);\n        this.on('deletion', fn);\n    }\n\n    /**\n     * Removes a specific event listener from the store.\n     * @param type The type of event from which to unsubscribe.\n     * @param id The subscriber ID returned by the `on()` method when the listener was registered.\n     * @throws Will throw an error if the subscriber ID is invalid or not found.\n     */\n    unsubscribe(type: StoreEvent['type'], id: number) {\n        delete this._subscribers[type]?.[id];\n    }\n\n    /**\n     * Updates the store's value and notifies all subscribers.\n     * @param value The new value to set for the store.\n     * @emits 'change' event with the new value when successfully updated.\n     * @note No-op if the store has been disposed via `dispose()`.\n     */\n    update(value: T) {\n        if (this._dead) return;\n        this.value = value;\n        this._sendEvent({ type: 'change', value });\n    }\n\n    /**\n     * Sends an event to all subscribers if the store has not been disposed of.\n     * @internal\n    */\n    _sendEvent(event: StoreEvent) {\n        if (this._dead) return;\n        this._subscribers[event.type] = this._subscribers[event.type] || {};\n        const subs = this._subscribers[event.type];\n        if (!subs) return;\n        for (const idx in Object.keys(subs)) {\n            subs[idx](event);\n        }\n    }\n\n    /**\n     * Close the store so it no longer sends events.\n     */\n    dispose() {\n        this._dead = true;\n        this._subscribers = {};\n        this._subscriberCounts = {};\n    }\n\n    valueOf() {\n        return structuredClone(this.value);\n    }\n}", "import { Store } from \"./Store.ts\";\n\n/**\n    * A reactive list store. \n    * Implements push(item). remove(idx), get(idx), and setAt(idx, item).\n    * push() sends an \"append\" event\n    * remove() sends a \"deletion\" event\n    * setAt() sends a \"change\" event with idx\n*/\nexport class ListStore<T> extends Store<T[]> {\n    constructor(ls?: T[]) {\n        super(ls);\n    }\n\n    /**\n     * Clears all elements from the store.\n     * @description Sets the store's value to an empty array and triggers a 'clear' event.\n     * @emits 'clear' event.\n     */\n    clear() {\n        this.value = [];\n        this._sendEvent({ type: \"clear\" });\n    }\n\n    /**\n     * Appends a new element to the end of the list.\n     * @param val The value to add to the list.\n     * @returns The new length of the list after appending.\n     * @emits 'append' event with:\n     *   - `value`: The appended item\n     *   - `idx`: The index where the item was inserted (length - 1)\n     */\n    push(val: T) {\n        this.value.push(val);\n        this._sendEvent({ type: \"append\", value: val, idx: this.value.length - 1 });\n        return this.value.length;\n    }\n\n    /**\n     * Removes the element at the specified index.\n     * @param idx The index of the element to remove.\n     * @throws {RangeError} If the index is out of bounds.\n     * @emits 'deletion' event with:\n     *   - `value`: The removed item\n     *   - `idx`: The index from which the item was removed\n     */\n    remove(idx: number) {\n        if (idx < 0 || idx >= this.value.length) throw new RangeError(\"Invalid index.\");\n        this._sendEvent({\n            type: 'deletion',\n            idx,\n            value: this.value.splice(idx, 1)[0]\n        });\n    }\n\n    /**\n     * Retrieves the element at the specified index.\n     * @param idx The index of the element to retrieve.\n     * @returns The element at the specified index.\n     * @throws {RangeError} If the index is out of bounds.\n     */\n    get(idx: number) {\n        if (idx < 0 || idx >= this.value.length) throw new RangeError(\"Invalid index.\");\n        return this.value[idx];\n    }\n\n    /**\n     * Sets the value of an element at a specific index.\n     * @param idx The index of the element to modify.\n     * @param value The new value to set at the specified index.\n     * @throws {RangeError} If the index is out of bounds.\n     * @emits 'change' event with:\n     *   - `value`: The new value\n     *   - `idx`: The index of the modified element\n     */\n    set(idx: number, value: T) {\n        if (idx < 0 || idx >= this.value.length) throw new RangeError(\"Invalid index.\");\n        this.value[idx] = value;\n        this._sendEvent({ type: \"change\", value, idx });\n    }\n\n    /**\n     * Utility accessor to find the length of the store.\n     */\n    get length() {\n        return this.value.length;\n    }\n}\n", "import { Store } from \"./Store.ts\";\n\n/**\n * A reactive map store.\n * Implements set(key, value), remove(key), clear(), transform(key, fn), has(key), entries(), \n * and get(key).\n * set() sends a \"change\" event, remove() sends a \"deletion\" event, clear() sends a \"clear\" event,\n * and transform() sends a \"change\" event.\n */\nexport class MapStore<T> extends Store<Map<string, T>> {\n\n    /**\n     * Constructor for MapStore.\n     * Initializes the store with the provided initial key-value pairs.\n     * @param init Initial key-value pairs to populate the store.\n     */\n    constructor(init?: Record<string, T>) {\n        super(new Map());\n\n        // Populates the store with initial key-value pairs.\n        for (const [k, v] of Object.entries(init || {})) {\n            this.value.set(k, v);\n        }\n    }\n\n    /**\n     * Sets a value for a specific key in the store.\n     * @param key The key to set or update.\n     * @param value The value to associate with the key.\n     * @emits 'change' event with:\n     *   - `key`: The key that was set or updated\n     *   - `value`: The new value associated with the key\n     */\n    set(key: string, value: T) {\n        this.value.set(key, value);\n        this._sendEvent({ key, value, type: 'change' });\n    }\n\n    /**\n     * A no-operation method for MapStore to maintain base Store compatibility.\n     * Does not perform any action.\n     * @deprecated\n     */\n    update() {\n        // Intentionally left as a no-op for MapStore\n    }\n\n    /**\n     * Removes a key-value pair from the store.\n     * @param key The key to remove.\n     * @emits 'deletion' event with:\n     *   - `key`: The key that was removed\n     *   - `value`: The current state of the map after deletion\n     */\n    remove(key: string) {\n        this.value.delete(key);\n        this._sendEvent({ key, value: this.value, type: 'deletion' });\n    }\n\n    /**\n     * Removes all key-value pairs from the store.\n     * @emits 'clear' event indicating the store has been emptied.\n     */\n    clear() {\n        this.value = new Map();\n        this._sendEvent({ type: 'clear' });\n    }\n\n    /**\n     * Applies a transformation function to the value of a specific key.\n     * @param key The key whose value will be transformed.\n     * @param fn A function that takes the current value and returns a new value.\n     * @throws {Error} If the key does not exist in the store.\n     * @emits 'change' event with the transformed value (via internal `set` method)\n     */\n    transform(key: string, fn: (val: T) => T) {\n        const old = this.value.get(key);\n        if (!old) throw new Error(`ERROR: key ${key} does not exist in store!`);\n        const transformed = fn(old);\n        this.set(key, transformed);\n        this._sendEvent({ type: \"change\", value: transformed, key });\n    }\n\n    /**\n     * Retrieves the value associated with a specific key.\n     * @param key The key to look up.\n     * @returns The value associated with the key, or undefined if the key does not exist.\n     */\n    get(key: string) {\n        return this.value.get(key);\n    }\n\n    has(key: string): boolean {\n        return this.value.has(key);\n    }\n\n    entries() {\n        return this.value.entries();\n    }\n}\n", "import { ListStore } from \"./ListStore.ts\";\nimport { MapStore } from \"./MapStore.ts\";\nimport { Store } from \"./Store.ts\";\n\nexport type StoreInitializer<T> =\n    | { type: 'list'; value?: Array<T> }\n    | { type: 'map'; value?: Record<string, T> }\n    | { value?: T };\n\nexport function store<T>(opts: { type: 'list'; value?: T[] }): ListStore<T>;\nexport function store<T>(opts: { type: 'map'; value?: Record<string, T> }): MapStore<T>;\nexport function store<T>(opts: { value?: T }): Store<T>;\nexport function store<T>(opts: StoreInitializer<T>): Store<any> {\n    if ('type' in opts) {\n        if (opts.type === 'list') return new ListStore(opts.value);\n        if (opts.type === 'map') return new MapStore(opts.value);\n    }\n    return new Store<T>(opts.value);\n}\nexport { Store, ListStore, MapStore };", "import { escape } from '../utils.ts';\n\nexport interface RawHtml {\n    raw: true,\n    contents: string\n}\n\n/**\n * Options for r()\n */\nexport interface RawHtmlOptions {\n    joiner?: string;\n}\n\n/**\n * Prevent values from being escaped by html``.\n * @param val Any value.\n * @returns An object that tells html`` to not escape `val` while building the HTML string.\n */\nexport const r = (val: any, options?: RawHtmlOptions): RawHtml => {\n    return {\n        raw: true,\n        contents: Array.isArray(val) ?\n            val.join(options?.joiner ?? ' ') :\n            val.toString()\n    }\n}\n\n/**\n * Creates an HTML string with automatic escaping of interpolated values.\n * Use r() to prevent escaping specific values.\n * @param strings The constant portions of the template string.\n * @param values The dynamic values to be interpolated (automatically escaped unless wrapped with r()).\n * @returns The built HTML string with all values properly escaped.\n * @example\n * ```\n * const unsafe = `oops <script>alert(1)</script>`;\n * testing.innerHTML = html`foo bar baz ${unsafe}`; // Values are automatically escaped\n * const safeHtml = html`<div>${r(\"<b>Bold</b>\")}</div>`; // Using r() to prevent escaping\n * ```\n */\nexport const html = (strings: TemplateStringsArray, ...values: (string | number | RawHtml)[]) => {\n    const built = [];\n    for (let i = 0; i < strings.length; i++) {\n        built.push(strings[i] || '');\n        let val = values[i];\n        if (typeof val !== 'undefined' && typeof val !== 'object') {\n            built.push(escape((val || '').toString()));\n        }\n        else {\n            built.push(val?.contents || '');\n        }\n    }\n    return built.join('');\n}\n", "import { escape } from '../utils.ts';\nimport type { Template } from '../types.ts';\n\n/**\n * The function that actually does the mustache templating.\n * @param string - the string to be templated.\n * @param data - The replacement data.\n * @internal\n * @returns the templated string.\n*/\nconst _mustache = (string: string, data: Record<string, string> = {}): string => {\n    const escapeExpr = new RegExp(\"\\\\\\\\({{\\\\s*\" + Object.keys(data).join(\"|\") + \"\\\\s*}})\", \"gi\");\n    new RegExp(Object.keys(data).join(\"|\"), \"gi\");\n    return string.replace(new RegExp(\"(^|[^\\\\\\\\]){{\\\\s*(\" + Object.keys(data).join(\"|\") + \")\\\\s*}}\", \"gi\"), function (matched, p1, p2) {\n        return `${p1 || \"\"}${data[p2]}`;\n    }).replace(escapeExpr, '$1');\n}\n\n/**\n * Applies mustache templating to a string. Any names surrounded by {{ }} will be\n * considered for templating: if the name is present as a property in `data`,\n * the mustache'd expression will be replaced with the value of the property in `data`.\n * Prefixing the opening {{ with double backslashes will escape the expression.\n * By default, mustache data is escaped with campfire's escape() function - you can\n * disable this by supplying the value of `esc` as false.\n * @param string - the string to be templated.\n * @param data - The data which will be used to perform replacements.\n * @param shouldEscape - Whether or not the templating data should be escaped. Defaults to true.\n * @returns the templated string.\n*/\nexport const mustache = (string: string, data: Record<string, string> = {}, shouldEscape = true): string => {\n    let escaped = { ...data };\n\n    if (shouldEscape) {\n        escaped = Object.fromEntries(Object.entries(escaped).map(([key, value]) => {\n            return [key, escape(value)]\n        }));\n    }\n\n    return _mustache(string, escaped);\n}\n\n/**\n * Returns a partial application that can be used to generate templated HTML strings.\n * Does not sanitize html, use with caution.\n * @param str - A string with mustaches in it. (For example: \n * `<span class='name'> {{ name }} </span>`)\n * @param shouldEscape - Whether or not the templating data should be escaped. Defaults to true.\n * @returns A function that when passed an Object with templating data,\n * returns the result of the templating operation performed on the string str with\n * the data passed in.\n */\nexport const template = (str: string, shouldEscape = true): Template => {\n    return (data: Record<string, string>) => mustache(str, data, shouldEscape);\n}\n", "import { insert, empty, rm, select, onload } from \"./dom/mod.ts\"\nimport { extend, nu } from \"./dom/nu.ts\"\nimport { NuBuilder } from \"./dom/NuBuilder.ts\"\nimport { ListStore, MapStore, Store, store } from \"./stores/mod.ts\"\nimport { html, r } from \"./templating/html.ts\"\nimport { mustache, template } from \"./templating/mustache.ts\"\nimport { seq, escape, unescape } from './utils.ts'\n\nimport type { SelectParams } from \"./dom/mod.ts\";\nimport type { RawHtmlOptions } from \"./templating/html.ts\";\nimport type { ElementPosition, ElementProperties, Subscriber, Template } from \"./types.ts\"\n\nexport default {\n    ListStore, MapStore, Store, store, nu, mustache, template, escape, unescape, extend, insert, empty, rm, select, onload, html, r, seq\n}\n\nexport {\n    ListStore, MapStore, Store, store, nu, mustache, template, escape, unescape, extend, insert, empty, rm, select, onload, html, r, seq\n}\n\nexport type {\n    ElementPosition, ElementProperties, Subscriber, Template, NuBuilder, SelectParams, RawHtmlOptions\n}"],
  "mappings": "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",
  "names": ["insert", "els", "where", "position", "ref", "frag", "item", "onload", "cb", "select", "s", "all", "from", "single", "elt", "rm", "empty", "escape", "str", "unescape", "expr", "entities", "entity", "seq", "args", "start", "stop", "step", "result", "fmtNode", "node", "attr", "initMutationObserver", "observer", "mutations", "mutation", "parent", "reactiveChildren", "createTypedElement", "name", "parseEltString", "str", "matches", "results", "elem", "NuBuilder", "info", "props", "tag", "id", "classes", "itm", "cls", "extend", "value", "_a", "obj", "prop", "type", "handler", "selectors", "children", "initMutationObserver", "unwrapDeps", "deps", "result", "key", "value", "isValidRenderFn", "fn", "extend", "elt", "args", "contents", "misc", "style", "on", "attrs", "raw", "gimme", "children", "content", "name", "dep", "evt", "res", "reactiveChildren", "select", "slot", "ref", "escape", "itm", "val", "child", "listener", "attr", "extras", "selector", "found", "nu", "info", "NuBuilder", "storeIds", "genId", "storeId", "id", "Store", "value", "type", "fn", "callNow", "_a", "event", "subs", "idx", "ListStore", "Store", "ls", "val", "idx", "value", "MapStore", "Store", "init", "k", "v", "key", "value", "fn", "old", "transformed", "store", "opts", "ListStore", "MapStore", "Store", "r", "val", "options", "html", "strings", "values", "built", "i", "escape", "_mustache", "string", "data", "escapeExpr", "matched", "p1", "p2", "mustache", "shouldEscape", "escaped", "key", "value", "escape", "template", "str", "campfire_default", "ListStore", "MapStore", "Store", "store", "nu", "mustache", "template", "escape", "unescape", "extend", "insert", "empty", "rm", "select", "onload", "html", "r", "seq"]
}

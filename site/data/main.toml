[home]
md = """
### campfire: a cozy web framework

**Campfire** is a collection of small utilities to make developing with vanilla JS easy.

It is kept lightweight on purpose, aiming to provide the bare minimum necessary to make development easier.

Features:
* Small size
* Easy to get started with - just `import` it into your project from 
  [unpkg](https://unpkg.com/browse/campfire.js/) or 
  [esm.sh](https://esm.sh/campfire.js/). 
  Campfire is on npm as well, so you can also add it into your existing application
  with `npm i campfire.js`!
* Uses vanilla JS wherever possible - no unnecessary DSLs or abstractions!
* Provides an easy-to-understand API for implementing reactive data
* Provides simple helpers for mustache templating

[Get campfire today!](?tab=get)
"""

[playground]
md = """
### try before you buy

Try one of these demos, or do your own thing!
<ul id='playground-demo-list'>

</ul>
<div id='cf-editor-controls'>
  <a href='javascript:void(0)' id='cf-editor-clear'>Clear All</a>
  <a href='javascript:void(0)' id='cf-editor-dl'>Download</a>
</div>

<div class='editor-wrapper'>
  <div class='cf-editor-html'></div>
  <div class='cf-editor-css'></div>
  <div class='cf-editor-js'></div>
  <div class='cf-editor-output'></div>
</div>
"""

[docs]
md = """
### using campfire

View the [full API reference](site/docs/modules/campfire.html) for detailed descriptions 
of the methods and classes provided by Campfire.

#### quick reference

Campfire provides the following methods and classes:
* `nu` - an element creation helper
  ##### a heading
  ```
  cf.nu("h4", { innerHTML: "A heading" })
  ```
  ##### a button
  ```
  cf.nu("button#alert-btn", {
    i: 'Click Me!', // same as innerHTML
    s: { border: "2px solid red" },
    on: {
      click: (e) => {
        alert('Click!')
      }
    }
  });
  ```
  ##### a div with some classes
  ```
  cf.nu('.class1.class2')
  ```
* `mustache` - a templating helper
  ```
  const result = cf.mustache("Welcome to Mars, {{ name }}.", { name: "user" }); // "Welcome to Mars, user."
  ```
* `template` - wraps `mustache()` to return a partially applied function, for strings that need to be updated frequently:
  ```
  const marsTemplate = cf.template("Welcome to Mars, {{ name }}."); // returns a function
  const result = marsTemplate({ name: "user" }); // "Welcome to Mars, user."
  const result = marsTemplate({ name: "John" }); // "Welcome to Mars, John."
  ```
* `escape` - Simple HTML escaper.
  ```
  escape("<script>alert('XSS')</script>") // "&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;"
  ```
* `unescape` - Unescapes the output of `escape()`.
  ```
  unescape("&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;") // "<script>alert('XSS')</script>".
  ```
* `Store` - Simple reactive data store.
* `ListStore` - Reactive list store.
"""

[get]
md = """
### turn your dumpster fire into a campfire today!
You can include campfire into your site with an import statement, either from a location 
where you are hosting it, or from esm.sh / unkpg.
```
import cf from 'https://unpkg.com/campfire.js/';
```
or
```
import { nu, ListStore } from 'https://unpkg.com/campfire.js/';
```

If you use npm and a module bundler, campfire provides both CommonJS and ESM versions that you can 
`import` or `require()` to incorporate it into your existing workflow, complete with TSDoc hints for 
your editor and TypeScript declarations.

To install:
```
$ npm i --save campfire.js
```

Then in your project:
```
import cf from 'campfire.js';
```

or (with CommonJS)
```
const cf = require('campfire.js');
```

Good luck, and thank you for choosing Campfire!
"""
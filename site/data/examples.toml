[answer]
title = "What do you get when you multiply six by nine?"

html = """\
<div id='last'></div>
<div id='result'></div>
"""

js = """\
const result = document.querySelector("#result");
const store = new cf.Store(0); // initial value
const question = store.on("update", (val) => { // this function is called every time the value is changed
    if (val == 54) {
        result.textContent = "The correct answer.";
    }
    else if (val == 42) {
        result.textContent = "Ah, I see you're a man of culture as well.";
    } else {
        result.textContent = "Hmm. Try again.";
    }
}, false);

store.on("update", (val) => {
    document.querySelector("#last").innerHTML = `Your response: ${val}`;
})
/* The last argument specifies whether or not the callback should be called right now with the current value of the store. */

const input = cf.nu("input", {
    m: { type: 'text', placeholder: 'What is six by nine?' },
})

document.body.prepend(input,
    cf.nu("button", {
        m: { type: 'button' },
        i: 'Answer',
        on: {
            'click': function (e) {
                const val = input.value.trim();
                if (val) store.update(val);
                else result.innerHTML = 'Type something first, ya numpty!';
            }
        }
    })
)
"""

[button]
title = "Reactive button"

js = """\
// A button that keeps track of how many times it's been clicked
let count = new cf.Store(0);

const btn = cf.nu("button#id.class1.class2", {
    contents: "I have not been clicked.",
    attrs: {
        // DOM attributes
        "data-an-attribute": 42,
    },
    on: {
        // event handlers, assigned using addEventListener
        "click": function (e) {
            count.update(count.value + 1);
        },
    },
    style: {
        // Uses property names as specified in CSSStyleDeclaration.
        background: "#007cdf",
        borderRadius: "0.25em",
        margin: "0.5rem",
        color: "#f5f4f0",
        transitionDuration: "0.2s",
        border: "2px solid black",
    }, // styles
    misc: {
        // miscellaneous properties
        type: "button",
    },
});

count.on("update", (val) => {
    btn.innerHTML = `I have been clicked ${val} times.`;
});
document.body.appendChild(btn);
"""

[todo]
title = "To-do list app"

js = """\
    const items = new cf.ListStore([]);

    const root = cf.nu("#app", {
        contents: '<h1>Todo App</h1>',
        style: { fontFamily: 'sans-serif' },
        raw: true
    })

    document.body.appendChild(root);

    const field = cf.nu("input", {
        style: { minWidth: '25%' },
        misc: { type: 'text' },
    });

    const button = cf.nu("button", {
        style: { minWidth: '5%' },
        misc: { type: 'button' },
        on: {
            'click': function(e) {
                const value = field.value.trim();
                if (value) items.push({ done: false, name: value })
            }
        },
        contents: 'Add'
    });

    const list = cf.nu("ul#items", {
        style: {
            display: 'flex',
            flexDirection: 'column',
            minWidth: '30%'
        }
    })

    root.append(field, button, list);

    function createTodo(val, idx) {
        const elt = cf.nu("li.todo-item", {
            contents: val.name,
            style: { cursor: 'pointer' },
            on: { 'click': function(e) {
                if (e.target !== this) return;
                const cIdx = parseInt(this.getAttribute("data-todo-idx"));
                const current = items.get(cIdx);
                current.done = !current.done;
                items.setAt(cIdx, current);
            }},
            attrs: {
                "data-todo-idx": idx
            },
        })

        elt.appendChild(cf.nu("button", {
            contents: 'remove',
            style: { marginLeft: '0.5rem' },
            on: { 'click': function(e) {
                const idx = parseInt(this.parentNode.getAttribute('data-todo-idx'));
                items.remove(idx);
            }}
        }));

        return elt;
    }

    items.on("update", (val) => {
        val.forEach(createTodo);
    })

    items.on("remove", (val) => {
        list.removeChild(list.querySelector(`.todo-item:nth-child(${val.idx + 1})`));
        const elems = list.getElementsByClassName('todo-item');
        for (let i = val.idx; i < elems.length; i++) elems[i].setAttribute("data-todo-idx", i);
    })

    items.on("push", (val) => {
        list.appendChild(createTodo(val.value, val.idx));
    })

    items.on("mutation", (val) => {
        list.querySelector(`.todo-item:nth-child(${val.idx + 1})`).style.textDecoration = val.value.done ? 'line-through' : 'initial';
    })
"""
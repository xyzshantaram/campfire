[
    {
        "name": "What do you get when you multiply six by nine?",
        "html": "<div id='last'></div>\n<div id='result'></div>",
        "js": "const result = document.querySelector(\"#result\");\r\nconst store = new cf.Store(0); \/\/ initial value\r\nconst question = store.on(\"update\", (val) => { \/\/ this function is called every time the value is changed\r\n    if (val == 54) {\r\n        result.textContent = \"The correct answer.\";\r\n    }\r\n    else if (val == 42) {\r\n        result.textContent = \"Ah, I see you're a man of culture as well.\";\r\n    } else {\r\n        result.textContent = \"Hmm. Try again.\";\r\n    }\r\n}, false);\r\n\r\nstore.on(\"update\", (val) => {\r\n    document.querySelector(\"#last\").innerHTML = `Your response: ${val}`;\r\n})\r\n\/* The last argument specifies whether or not the callback should be called right now with the current value of the store. *\/\r\n\r\nconst input = cf.nu(\"input\", {\r\n    m: { type: 'text', placeholder: 'What is six by nine?' },\r\n})\r\n\r\ndocument.body.prepend(input,\r\n    cf.nu(\"button\", {\r\n        m: { type: 'button' },\r\n        i: 'Answer',\r\n        on: {\r\n            'click': function (e) {\r\n                const val = input.value.trim();\r\n                if (val) store.update(val);\r\n                else result.innerHTML = 'Type something first, ya numpty!';\r\n            }\r\n        }\r\n    })\r\n)",
        "css": ""
    },
    {
        "name": "Reactive button",
        "html": "",
        "js": "\/\/ A button that keeps track of how many times it's been clicked\r\nlet count = 0;\r\nconst btn = cf.nu(\"button#id.class1.class2\", {\r\n  innerHTML: \"I have not been clicked.\",\r\n  attrs: {\r\n    \/\/ DOM attributes\r\n    \"data-an-attribute\": 42,\r\n  },\r\n  on: {\r\n    \/\/ event handlers, assigned using addEventListener\r\n    \"click\": function (e) {\r\n      this.innerHTML = `I have been clicked ${++count} times.`;\r\n    },\r\n  },\r\n  style: {\r\n    \/\/ Uses property names as specified in CSSStyleDeclaration.\r\n    background: \"#007cdf\",\r\n    borderRadius: \"0.25em\",\r\n    margin: \"0.5rem\",\r\n    color: \"#f5f4f0\",\r\n    transitionDuration: \"0.2s\",\r\n    border: \"2px solid black\",\r\n  }, \/\/ styles\r\n  misc: {\r\n    \/\/ miscellaneous properties\r\n    type: \"button\",\r\n  },\r\n});\r\ndocument.body.appendChild(btn);",
        "css": ""
    },
    {
        "name": "To-do list",
        "html": "",
        "js": "const items = new cf.ListStore([]);\r\n\r\nconst root = cf.nu(\"#app\", {\r\n    innerHTML: '<h1>Todo App<\/h1>',\r\n    style: { fontFamily: 'sans-serif' }\r\n})\r\n\r\ndocument.body.appendChild(root);\r\n\r\nconst field = cf.nu(\"input\", {\r\n    style: { minWidth: '25%' },\r\n    misc: { type: 'text' },\r\n});\r\n\r\nconst button = cf.nu(\"button\", {\r\n    style: { minWidth: '5%' },\r\n    misc: { type: 'button' },\r\n    on: {\r\n        'click': function(e) {\r\n            const value = field.value.trim();\r\n            if (value) items.push({ done: false, name: value })\r\n        }\r\n    },\r\n    innerHTML: 'Add'\r\n});\r\n\r\nconst list = cf.nu(\"ul#items\", {\r\n    style: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        minWidth: '30%'\r\n    }\r\n})\r\n\r\nroot.append(field, button, list);\r\n\r\nfunction createTodo(val, idx) {\r\n    const elt = cf.nu(\"li.todo-item\", {\r\n        innerHTML: val.name,\r\n        style: { cursor: 'pointer' },\r\n        on: { 'click': function(e) {\r\n            if (e.target !== this) return;\r\n            const cIdx = parseInt(this.getAttribute(\"data-todo-idx\"));\r\n            const current = items.get(cIdx);\r\n            current.done = !current.done;\r\n            items.setAt(cIdx, current);\r\n        }},\r\n        attrs: {\r\n            \"data-todo-idx\": idx\r\n        },\r\n    })\r\n\r\n    elt.appendChild(cf.nu(\"button\", {\r\n        innerHTML: 'remove',\r\n        style: { marginLeft: '0.5rem' },\r\n        on: { 'click': function(e) {\r\n            const idx = parseInt(this.parentNode.getAttribute('data-todo-idx'));\r\n            items.remove(idx);\r\n        }}\r\n    }));\r\n\r\n    return elt;\r\n}\r\n\r\nitems.on(\"update\", (val) => {\r\n    val.forEach(createTodo);\r\n})\r\n\r\nitems.on(\"remove\", (val) => {\r\n    list.removeChild(list.querySelector(`.todo-item:nth-child(${val.idx + 1})`));\r\n    const elems = list.getElementsByClassName('todo-item');\r\n    for (let i = val.idx; i < elems.length; i++) elems[i].setAttribute(\"data-todo-idx\", i);\r\n})\r\n\r\nitems.on(\"push\", (val) => {\r\n    list.appendChild(createTodo(val.value, val.idx));\r\n})\r\n\r\nitems.on(\"mutation\", (val) => {\r\n    list.querySelector(`.todo-item:nth-child(${val.idx + 1})`).style.textDecoration = val.value.done ? 'line-through' : 'initial';\r\n})",
        "css": ""
    }
]